{"version":3,"sources":["styles/theme.jsx","styles/GlobalStyles.jsx","components/contexts/ConnectionContext.jsx","components/MessageCenter.js","services/socketHandler.js","components/Header.jsx","components/Generic/Button.jsx","components/Generic/Divider.jsx","components/Generic/Input.jsx","components/hooks/useComms.jsx","components/actions/actions.js","components/hooks/useSubscription.jsx","components/RoomSelect.jsx","components/Welcome.jsx","components/AppControls.jsx","components/MessageDisplay/SingleMessage.jsx","types/messageTemplates.js","types/message.js","components/MessageDisplay/MessageDisplay.jsx","components/Generic/Grids/FourByFourGrid.jsx","components/Timers/TimerStates/Running.jsx","components/Timers/TimerStates/Stopped.jsx","components/Generic/Grids/TimerButtonGrid.jsx","components/Timers/FoodSelectButton.jsx","components/Timers/TimerStates/Select.jsx","components/Timers/OnlineTimer.jsx","components/Timers/TimerGrid.jsx","components/RoomCodeDisplay.jsx","services/fakeSocket.js","../../server/lib/types/Room.js","../../server/lib/types/Timer.js","components/Main.jsx","App.js","serviceWorker.js","index.js","assets/sound/annoying-vuvuzela-tone.mp3"],"names":["baseFonts","theme","palette","primary","main","light","dark","secondary","success","error","disabled","typography","base","fontFamily","join","title","concat","emoji","transition","duration","timingFunction","appDrawer","width","mobile","open","closed","desktop","GlobalStyles","createGlobalStyle","_templateObject","_ref","_ref2","_ref3","props","ConnectionContext","createContext","MessageCenter","Subject","publish","topic","data","next","createSocket","io","Header","styled","className","react_default","a","createElement","Header_templateObject","Button","onClick","children","rest","variant","Object","objectWithoutProperties","assign","type","Button_templateObject","_ref4","_ref5","_ref6","_ref7","DividerText","p","Divider_templateObject","Divider","_templateObject2","Input","input","Input_templateObject","useComms","socket","useContext","connection","start","id","food","emit","reset","createRoom","nickname","console","log","joinRoom","roomCode","requestTimers","useSubscription","subs","subscription","useRef","useEffect","topics","keys","current","pipe","filter","includes","subscribe","unsubscribe","RoomSelect","_useRef","dispatch","subscriptionSettings","defineProperty","_useState","useState","_useState2","slicedToArray","setNickname","nicknameIsValid","length","_useState3","_useState4","setRoomCode","roomCodeIsValid","_useComms","Generic_Input","onChange","event","newName","target","value","placeholder","aria-label","aria-required","style","marginBottom","Fragment","Generic_Button","Generic_Divider","newRoomCode","toUpperCase","RoomSelect_templateObject","Welcome","setupState","setSetupState","components_RoomSelect","AppControls","AppControls_templateObject","TimeContainer","span","SingleMessage_templateObject","fadeOut","keyframes","SingleMessage_templateObject2","Message","timestamp","date","Date","getHours","getMinutes","_templateObject3","messageTemplates","memberString","members","message","content","classCallCheck","this","MessageDisplay","messages","setMessages","handleMessage","otherData","newMessage","prevMessages","toConsumableArray","slice","MAX_MESSAGES","map","msg","SingleMessage","key","MessageDisplay_templateObject","GridBase","grid","FourByFourGrid_templateObject","Grid","FourByFourGrid_templateObject2","Running","timeLeft","button","Stopped_templateObject","Stopped","Stopped_Button","TimerButtonGrid_templateObject","TimerButtonGrid_templateObject2","FoodSelectButton","FoodSelectButton_templateObject","Select","TimerButtonGrid","Timers_FoodSelectButton","NewTimer","startDate","state","foodName","soundHasPlayed","setSoundHasPlayed","currentTime","startTime","Math","max","round","getTimeLeft","Audio","audioFile","play","TimerStates_Running","TimerStates_Stopped","TimerStates_Select","OnlineTimer_templateObject","TimerGrid","timers","setTimers","timerCount","setDate","timerID","setInterval","clearInterval","FourByFourGrid","timer","Timers_OnlineTimer","room","RoomCodeDisplay","RoomCodeDisplay_templateObject","types_Room","Room","code","createClass","_this","user","push","iterations","i","Error","foods","FISH","name","TROPHY_FISH","MEAT","MONSTER_MEAT","types_Timer","Timer","toString","TypeError","publishTimerSync","uuid","fakeSocket","init","amount","addTimer","addTimers","on","action","getTimer","initialState","undefined","Main","memoizedConnectionReducer","useCallback","startListening","objectSpread","_useReducer","useReducer","_useReducer2","connectionValue","OfflineContent","Timers_TimerGrid","OnlineContent","components_RoomCodeDisplay","contexts_ConnectionContext","Provider","components_Header","components_Welcome","MessageDisplay_MessageDisplay","components_AppControls","WebFont","load","google","families","App","styled_components_browser_esm","styles_GlobalStyles","components_Main","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports","__webpack_require__"],"mappings":"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","file":"static/js/main.f754a658.chunk.js","sourcesContent":["const baseFonts = ['Roboto', 'Arial', 'sans-serif'];\n\nexport default {\n  palette: {\n    primary: {\n      main: '#efd71f',\n      light: '#fff8bf',\n      dark: '#59563d',\n    },\n    secondary: {\n      main: '#FFE2BC',\n      light: '#FFF9F0',\n      dark: '#C79349',\n    },\n    success: {\n      main: '#319F4A',\n      light: '#55D370',\n      dark: '#257134',\n    },\n    error: {\n      main: '#D34E41',\n      light: '#FF7365',\n      dark: '#953930',\n    },\n    disabled: {\n      main: '#7A7A7A',\n    },\n    typography: {\n      light: '#FFFFFF',\n      dark: '#020202',\n    },\n  },\n  typography: {\n    base: {\n      fontFamily: baseFonts.join(','),\n    },\n    title: {\n      fontFamily: ['Montserrat', ...baseFonts].join(','),\n    },\n  },\n  emoji: '🥥',\n  transition: {\n    duration: '0.2s',\n    timingFunction: 'ease-out',\n  },\n  appDrawer: {\n    width: {\n      mobile: {\n        open: '90vw',\n        closed: '0',\n      },\n      desktop: {\n        open: '240px',\n        closed: '0',\n      },\n    },\n  },\n};\n","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyles = createGlobalStyle`\n  body {\n    font-family: ${({ theme }) => theme.typography.base.fontFamily};\n    color: ${({ theme }) => theme.palette.typography.light};\n    background-color: #1A1A1A;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    font-family: ${({ theme }) => theme.typography.title.fontFamily};\n    font-weight: 600;\n\n    svg {\n      vertical-align: middle;\n      margin-right: 0.3em;\n      margin-top: -0.5%;\n    }\n  }\n\n  h1, h2 {\n    font-weight: 700;\n  }\n\n  h3 {\n    color: ${props => props.theme.palette.primary.dark}\n  }\n`;\n\nexport default GlobalStyles;\n","import { createContext } from 'react';\r\n\r\nconst ConnectionContext = createContext(null);\r\n\r\nexport default ConnectionContext;\r\n","import { Subject } from 'rxjs';\r\n\r\n/**\r\n * Used to publish and subscribe to messages.\r\n */\r\nconst MessageCenter = new Subject();\r\n\r\n/**\r\n * Used to publish messages.\r\n * @param {string} topic Which topic is the event related to. Only subscribers to this topic will receive it.\r\n * @param {*}      data  Message content.\r\n */\r\nconst publish = (topic, data) => MessageCenter.next({ topic, data });\r\n\r\nexport { publish };\r\nexport default MessageCenter;\r\n","import io from 'socket.io-client';\r\nimport uuid from 'uuid/v4';\r\nimport * as actions from '../components/actions/actions';\r\nimport { publish } from '../components/MessageCenter';\r\n\r\n\r\nconst createSocket = () => {\r\n  // Connect to the socket\r\n  const serverUrl =\r\n    process.env.NODE_ENV === 'development'\r\n      ? 'http://localhost:1338'\r\n      : 'https://sea-of-thieves-cooking-timer.herokuapp.com';\r\n\r\n  const socket = io(serverUrl);\r\n\r\n  return socket;\r\n};\r\n\r\nconst startListening = socket => {\r\n  // Someone joined the room.\r\n  socket.on(actions.USER_JOINED, data => {\r\n    const { nickname, timestamp, roomCode } = data;\r\n    publish(actions.USER_JOINED, {\r\n      type: actions.USER_JOINED,\r\n      id: uuid(),\r\n      nickname,\r\n      timestamp,\r\n      roomCode,\r\n    });\r\n  });\r\n\r\n  // User themself joined a room.\r\n  socket.on(actions.MEMBER_LIST, data => {\r\n    const { timestamp, members } = data;\r\n    publish(actions.MEMBER_LIST, {\r\n      type: actions.MEMBER_LIST,\r\n      id: uuid(),\r\n      timestamp,\r\n      members,\r\n    });\r\n  });\r\n\r\n  // Someone else left the room.\r\n  socket.on(actions.USER_LEFT, data => {\r\n    const { nickname, timestamp } = data;\r\n    publish(actions.USER_LEFT, {\r\n      type: actions.USER_LEFT,\r\n      id: uuid(),\r\n      nickname,\r\n      timestamp,\r\n    });\r\n  });\r\n\r\n  // Room was created.\r\n  socket.on(actions.ROOM_CREATED, data => {\r\n    const { roomCode } = data;\r\n    publish(actions.ROOM_CREATED, roomCode);\r\n    // console.log(`🚪 Room code: ${roomCode}`);\r\n  });\r\n\r\n  // Client tried to join a room that doesn't exist.\r\n  socket.on(actions.NONEXISTANT_ROOM, data => {\r\n    const { roomCode, timestamp } = data;\r\n    publish(actions.NONEXISTANT_ROOM, {\r\n      type: actions.NONEXISTANT_ROOM,\r\n      id: uuid(),\r\n      roomCode,\r\n      timestamp,\r\n    });\r\n  });\r\n\r\n  // Server sent timers.\r\n  socket.on(actions.TIMER_SYNC, data => {\r\n    const { timers, message } = data;\r\n    publish(actions.TIMER_SYNC, {\r\n      type: actions.TIMER_SYNC,\r\n      id: uuid(),\r\n      timestamp: new Date().toString(),\r\n      timers,\r\n      message,\r\n    });\r\n  });\r\n\r\n  // Generic message\r\n  socket.on(actions.GENERIC_MESSAGE, data => {\r\n    const { message } = data;\r\n\r\n    publish(actions.GENERIC_MESSAGE, {\r\n      type: actions.GENERIC_MESSAGE,\r\n      id: uuid(),\r\n      timestamp: new Date().toString(),\r\n      message,\r\n    });\r\n  });\r\n};\r\n\r\nconst stopListening = socket => {\r\n  socket.off(actions.USER_JOINED);\r\n  socket.off(actions.USER_LEFT);\r\n  socket.off(actions.NONEXISTANT_ROOM);\r\n  socket.off(actions.MEMBER_LIST);\r\n  socket.off(actions.ROOM_CREATED);\r\n\r\n  console.log('Removed event listeners');\r\n};\r\n\r\nexport { createSocket, startListening, stopListening };\r\nexport default createSocket;\r\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst HeaderContent = ({ className }) => {\n  return (\n    <div className={className}>\n      <h1>Cooking Timer</h1>\n    </div>\n  );\n};\n\nHeaderContent.propTypes = {\n  className: PropTypes.string,\n};\n\nconst Header = styled(HeaderContent)`\n  height: 50px;\n  background-color: ${({ theme }) => theme.palette.primary.main};\n  color: black;\n\n  h1 {\n    margin: 0;\n    padding: 0.5rem 0.25rem;\n    text-align: center;\n  }\n`;\n\nexport default Header;\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\n/**\n * Button component\n * Variants:\n *   - Main: Displayed as a block to take up entire width.\n *   - Inline: Displayed as an inline block.\n */\nconst ButtonBase = ({ onClick, children, className, variant, ...rest }) => {\n  return (\n    <button type=\"button\" onClick={onClick} className={className} {...rest}>\n      {children}\n    </button>\n  );\n};\n\nButtonBase.propTypes = {\n  onClick: PropTypes.func,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  variant: PropTypes.string,\n};\n\nconst Button = styled(ButtonBase)`\n  /* Reset button styles */\n  border: none;\n  font: inherit;\n  cursor: pointer;\n\n  display: ${({ variant }) => (variant === 'inline' ? 'inline-block' : 'block')}\n  background-color: ${({ theme }) => theme.palette.primary.main};\n  color: ${({ theme }) => theme.palette.typography.dark};\n  margin-top: 0.5rem;\n  margin-bottom: 0.5rem;\n  margin-left: ${({ variant }) => (variant === 'inline' ? '0.5rem' : 'auto')}\n  margin-right: ${({ variant }) => (variant === 'inline' ? '0.5rem' : 'auto')}\n  padding: 0.5rem 1rem;\n\n  border-radius: 3rem;\n  text-transform: uppercase;\n\n  &:disabled {\n    background-color: ${({ theme }) => theme.palette.disabled.main};\n  }\n`;\n\nexport default Button;\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\n// Text in the middle of a divider\nconst DividerText = styled.p`\n  display: inline-block;\n  background-color: #7a7a7a;\n  padding: 0.25rem 0.5rem;\n  color: ${({ theme }) => theme.palette.typography.dark};\n  font-size: 0.75rem;\n  font-weight: bold;\n\n  ::before {\n    content: '';\n    height: 1px;\n    width: 100%;\n    background-color: #7a7a7a;\n    position: absolute;\n    left: 0;\n    top: 50%;\n    z-index: -1;\n  }\n`;\n\nconst DividerBase = ({ className, children }) => {\n  return (\n    <div className={className}>\n      <DividerText>{children}</DividerText>\n    </div>\n  );\n};\n\nDividerBase.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node,\n};\n\nconst Divider = styled(DividerBase)`\n  position: relative;\n  text-align: center;\n`;\n\nexport default Divider;\n","import styled from 'styled-components';\n\nconst Input = styled.input`\n  background-color: white;\n  border: none;\n  padding: 1rem;\n  font-size: 1rem;\n  margin-top: 0.5rem;\n  margin-bottom: 0.5rem;\n  margin-left: ${({ variant }) => (variant === 'inline' ? '0.5rem' : 'auto')}\n  margin-right: ${({ variant }) => (variant === 'inline' ? '0.5rem' : 'auto')}\n  display: ${({ variant }) => (variant === 'inline' ? 'inline-block' : 'block')}\n`;\n\nexport default Input;\n","import { useContext } from 'react';\r\n\r\nimport ConnectionContext from '../contexts/ConnectionContext';\r\nimport * as actions from '../actions/actions';\r\n\r\n/**\r\n * Custom hook.\r\n * Provides functionality for other components to communicate with the server.\r\n * This can help with stale state: https://github.com/facebook/react/issues/15041\r\n */\r\nconst useComms = () => {\r\n  // Get the socket from our context\r\n  const { connection } = useContext(ConnectionContext);\r\n  const { socket } = connection;\r\n\r\n  /**\r\n   * Starts a timer with the given id and food.\r\n   * @param {string} id   Id of timer to start.\r\n   * @param {string} food Food indicating timer duration.\r\n   */\r\n  const start = (id, food) => () => {\r\n    socket.emit(actions.START, { id, food });\r\n  };\r\n\r\n  const reset = id => () => {\r\n    socket.emit(actions.RESET, { id });\r\n  };\r\n\r\n  /**\r\n   * Join a room with the given code code\r\n   * @param {string} roomCode Room to join.\r\n   * @param {string} nickname Client nickname\r\n   */\r\n  const joinRoom = (roomCode, nickname) => {\r\n    socket.emit(actions.JOIN_ROOM, { roomCode, nickname });\r\n  };\r\n\r\n  /**\r\n   * Creates a new room.\r\n   */\r\n  const createRoom = nickname => {\r\n    if (socket) {\r\n      socket.emit(actions.CREATE_ROOM, { nickname });\r\n    } else {\r\n      console.log('No socket!', socket);\r\n    }\r\n  };\r\n\r\n  const requestTimers = () => {\r\n    socket.emit(actions.REQUEST_TIMERS);\r\n  };\r\n\r\n  return { start, reset, createRoom, joinRoom, requestTimers };\r\n};\r\n\r\nexport default useComms;\r\n","const CREATE_ROOM = 'CREATE_ROOM';\r\nconst JOIN_ROOM = 'JOIN_ROOM';\r\nconst START = 'START';\r\nconst RESET = 'RESET';\r\nconst PAUSE = 'PAUSE';\r\nconst USER_JOINED = 'USER_JOINED';\r\nconst USER_LEFT = 'USER_LEFT';\r\nconst MEMBER_LIST = 'MEMBER_LIST';\r\nconst NONEXISTANT_ROOM = 'NONEXISTANT_ROOM';\r\nconst ROOM_CREATED = 'ROOM_CREATED';\r\nconst REQUEST_TIMERS = 'REQUEST_TIMERS';\r\nconst TIMER_SYNC = 'TIMER_SYNC';\r\nconst GENERIC_MESSAGE = 'GENERIC_MESSAGE';\r\n\r\nexport {\r\n  CREATE_ROOM,\r\n  JOIN_ROOM,\r\n  START,\r\n  RESET,\r\n  PAUSE,\r\n  USER_JOINED,\r\n  USER_LEFT,\r\n  MEMBER_LIST,\r\n  NONEXISTANT_ROOM,\r\n  ROOM_CREATED,\r\n  REQUEST_TIMERS,\r\n  TIMER_SYNC,\r\n  GENERIC_MESSAGE,\r\n};\r\n","import { useRef, useEffect } from 'react';\r\nimport { filter } from 'rxjs/operators';\r\n\r\nimport MessageCenter from '../MessageCenter';\r\n\r\nconst debug = false;\r\n\r\n/**\r\n * Custom hook.\r\n * Provides components with a subscription thingy.\r\n * @param {object} subs Object where keys are topics and values are their callback functions.\r\n */\r\nconst useSubscription = subs => {\r\n  const subscription = useRef();\r\n\r\n  useEffect(() => {\r\n    const topics = Object.keys(subs);\r\n\r\n    if (debug) console.log('✅ [sub]', topics);\r\n\r\n    subscription.current = MessageCenter.pipe(\r\n      filter(({ topic }) => topics.includes(topic)),\r\n    ).subscribe(({ topic, data }) => {\r\n      // Call the topic's callback with the received data.\r\n      subs[topic](data);\r\n    });\r\n\r\n    return () => {\r\n      if (debug) console.log('❌ [unsub]', topics);\r\n      subscription.current.unsubscribe();\r\n    };\r\n  }, [subs]);\r\n\r\n  return subscription;\r\n};\r\n\r\nexport default useSubscription;\r\n","import PropTypes from 'prop-types';\r\nimport React, { useContext, useRef, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { uniqueNamesGenerator } from 'unique-names-generator';\r\nimport { ROOM_CREATED, USER_JOINED } from './actions/actions';\r\nimport ConnectionContext from './contexts/ConnectionContext';\r\nimport Button from './Generic/Button';\r\nimport Divider from './Generic/Divider';\r\nimport Input from './Generic/Input';\r\nimport useComms from './hooks/useComms';\r\nimport useSubscription from './hooks/useSubscription';\r\n\r\nconst roomCodeLength = 4;\r\nlet initialNickname = '';\r\nlet initialRoomCode = '';\r\n\r\n/**\r\n * Auto-populate fields in development for faster testing\r\n */\r\nif (process.env.NODE_ENV === 'development') {\r\n  initialNickname = uniqueNamesGenerator('-', true);\r\n  initialRoomCode = '';\r\n}\r\n\r\n/**\r\n * Displays a form where a user can\r\n *   - Set their nickname\r\n *   - Create a room\r\n *     OR\r\n *   - Enter a room code\r\n *   - Join that room\r\n */\r\nconst RoomSelectBase = ({ className }) => {\r\n  const { dispatch } = useContext(ConnectionContext);\r\n\r\n  // Store our subscription settings in a ref. We don't want to change these over the course of the component's lifetime.\r\n  const subscriptionSettings = useRef({\r\n    [ROOM_CREATED]: roomCode => {\r\n      dispatch({ type: 'ONLINE', roomCode });\r\n    },\r\n    [USER_JOINED]: data => {\r\n      const { roomCode } = data;\r\n      dispatch({ type: 'ONLINE', roomCode });\r\n    },\r\n  });\r\n  // Subscribe to the events above.\r\n  useSubscription(subscriptionSettings.current);\r\n\r\n  /**\r\n   * Allow the user to set a nickname\r\n   */\r\n  const [nickname, setNickname] = useState(initialNickname);\r\n  const handleNicknameChange = event => {\r\n    const newName = event.target.value;\r\n    setNickname(newName);\r\n  };\r\n\r\n  /**\r\n   * Validates a nickname.\r\n   * Used before creating or joining a room.\r\n   */\r\n  const nicknameIsValid = () => {\r\n    return (\r\n      typeof nickname === 'string' &&\r\n      nickname.length >= 3 &&\r\n      nickname.length <= 32\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Allow the user to set a room code\r\n   */\r\n  const [roomCode, setRoomCode] = useState(initialRoomCode);\r\n  const handleRoomCodeChange = event => {\r\n    let newRoomCode = event.target.value;\r\n\r\n    // Limit room code length\r\n    if (newRoomCode.length <= roomCodeLength) {\r\n      newRoomCode = newRoomCode.toUpperCase();\r\n      setRoomCode(newRoomCode);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Validate roomCode.\r\n   */\r\n  const roomCodeIsValid = () => {\r\n    return roomCode.length === roomCodeLength;\r\n  };\r\n\r\n  // Use our custom useComms hook to communicate with the server.\r\n  const { createRoom, joinRoom } = useComms();\r\n\r\n  /**\r\n   * Pass create room event to its action handler.\r\n   */\r\n  const handleCreateRoom = () => {\r\n    if (nicknameIsValid()) {\r\n      createRoom(nickname);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Pass join room eventd to its action handler.\r\n   */\r\n  const handleJoinRoom = () => {\r\n    if (nicknameIsValid() && roomCodeIsValid()) {\r\n      joinRoom(roomCode, nickname);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={className}>\r\n      <Input\r\n        type=\"text\"\r\n        onChange={handleNicknameChange}\r\n        value={nickname}\r\n        placeholder=\"My name is...\"\r\n        aria-label=\"Nickname\"\r\n        aria-required=\"true\"\r\n        style={{ marginBottom: '4rem' }}\r\n      />\r\n\r\n      {nicknameIsValid() && (\r\n        <React.Fragment>\r\n          <Button\r\n            variant=\"main\"\r\n            onClick={handleCreateRoom}\r\n            disabled={!nicknameIsValid()}\r\n          >\r\n            Create room\r\n          </Button>\r\n\r\n          <Divider>OR</Divider>\r\n\r\n          <Input\r\n            type=\"text\"\r\n            onChange={handleRoomCodeChange}\r\n            value={roomCode}\r\n            placeholder=\"Room code\"\r\n            aria-label=\"Room code\"\r\n          />\r\n          <Button\r\n            variant=\"main\"\r\n            onClick={handleJoinRoom}\r\n            disabled={!roomCodeIsValid()}\r\n          >\r\n            Join room\r\n          </Button>\r\n        </React.Fragment>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nRoomSelectBase.propTypes = {\r\n  className: PropTypes.string,\r\n};\r\n\r\nconst RoomSelect = styled(RoomSelectBase)``;\r\n\r\nexport default RoomSelect;\r\n","import React, { useState, useContext } from 'react';\r\n\r\nimport ConnectionContext from './contexts/ConnectionContext';\r\nimport RoomSelect from './RoomSelect';\r\nimport Button from './Generic/Button';\r\n\r\n/**\r\n * Welcome page for new users.\r\n * Displays option to use the timers offline or online.\r\n */\r\nconst Welcome = () => {\r\n  const { dispatch } = useContext(ConnectionContext);\r\n  const [setupState, setSetupState] = useState('ONLINE_SELECT');\r\n\r\n  const goOffline = () => {\r\n    dispatch({ type: 'OFFLINE' });\r\n  };\r\n\r\n  const goOnline = () => {\r\n    dispatch({ type: 'ONLINE_SETUP' });\r\n    setSetupState('ROOM_SELECT');\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {setupState === 'ONLINE_SELECT' && (\r\n        <React.Fragment>\r\n          <Button onClick={goOffline}>Offline</Button>\r\n          <Button onClick={goOnline}>Online</Button>\r\n        </React.Fragment>\r\n      )}\r\n      {setupState === 'ROOM_SELECT' && (\r\n        <React.Fragment>\r\n          <RoomSelect />\r\n        </React.Fragment>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Welcome;\r\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst AppControlsContent = ({ className }) => {\n  return (\n    <div className={className}>\n      <div>App Controls here</div>\n    </div>\n  );\n};\n\nAppControlsContent.propTypes = {\n  className: PropTypes.string,\n};\n\nconst AppControls = styled(AppControlsContent)`\n  height: 30px;\n  background-color: #efd71f;\n  color: black;\n\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  text-align: center;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport default AppControls;\n","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport PropTypes from 'prop-types';\n\n/**\n * Displays the timestamp of a given message\n */\nconst TimeContainer = styled.span`\n  padding-right: 0.5rem;\n  color: #9f9f9f;\n`;\n\n/**\n * Structure of a message.\n */\nconst MessageBase = ({ className, timestamp, children }) => {\n  const date = new Date(timestamp);\n\n  return (\n    <p className={className}>\n      <TimeContainer>{`${date.getHours()}:${date.getMinutes()}`}</TimeContainer>\n      <span>{children}</span>\n    </p>\n  );\n};\n\nMessageBase.propTypes = {\n  className: PropTypes.string,\n  timestamp: PropTypes.string,\n  children: PropTypes.node,\n};\n\n// Fade messages out after some time.\nconst fadeOut = keyframes`\n  from {\n    opacity: 1;\n  }\n\n  to {\n    opacity: 0;\n  }\n`;\n\n/**\n * Styled message structure\n */\nconst Message = styled(MessageBase)`\n  background-color: white;\n  display: inline-flex;\n  padding: 0.5rem 1rem;\n  border-radius: 1rem;\n  color: ${({ theme }) => theme.palette.typography.dark};\n  margin: 0.15rem;\n  animation: ${fadeOut} 1s ease-out 6s 1 forwards;\n`;\n\nexport default Message;\n","import * as actions from '../components/actions/actions';\r\n\r\n/**\r\n * Templates for various types of messages.\r\n */\r\nconst messageTemplates = {};\r\n\r\nmessageTemplates[actions.USER_JOINED] = ({ nickname }) => {\r\n  return `${nickname} joined`;\r\n};\r\n\r\nmessageTemplates[actions.MEMBER_LIST] = ({ members }) => {\r\n  const memberString = members.join(', ');\r\n  return `Current members: ${memberString}`;\r\n};\r\n\r\nmessageTemplates[actions.USER_LEFT] = ({ nickname }) => {\r\n  return `${nickname} left`;\r\n};\r\n\r\nmessageTemplates[actions.NONEXISTANT_ROOM] = ({ roomCode }) => {\r\n  return `Room ${roomCode} doesn't exist`;\r\n};\r\n\r\nmessageTemplates[actions.TIMER_SYNC] = ({ message }) => {\r\n  return message;\r\n};\r\n\r\nmessageTemplates[actions.GENERIC_MESSAGE] = ({ message }) => {\r\n  return message;\r\n};\r\n\r\nexport default messageTemplates;\r\n","/**\n * Generic message data type to the front end.\n * @param {string} id        Identifier used primarily in React components' key attribute.\n * @param {string} timestamp Timestamp for when the event for this message happened.\n * @param {string} content   Actual message content.\n */\nclass Message {\n  constructor({ id, timestamp, content }) {\n    this.id = id;\n    this.timestamp = timestamp;\n    this.content = content;\n  }\n}\n\nexport default Message;\n","import React, { useState, useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {\r\n  USER_JOINED,\r\n  USER_LEFT,\r\n  MEMBER_LIST,\r\n  NONEXISTANT_ROOM,\r\n  TIMER_SYNC,\r\n  GENERIC_MESSAGE,\r\n} from '../actions/actions';\r\nimport useSubscription from '../hooks/useSubscription';\r\nimport SingleMessage from './SingleMessage';\r\nimport messageTemplates from '../../types/messageTemplates';\r\nimport Message from '../../types/message';\r\n\r\n// List of events this component subscribes to (and handles).\r\nconst MAX_MESSAGES = 7;\r\n\r\nconst MessageDisplayBase = ({ className }) => {\r\n  // Store messages in state.\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  // Build human-readable messages out of data that is received.\r\n  const handleMessage = data => {\r\n    const { id, type, timestamp, ...otherData } = data;\r\n\r\n    // Set the message content via messageTemplates.\r\n    const content = messageTemplates[type](otherData);\r\n    const newMessage = new Message({ id, timestamp, content });\r\n\r\n    setMessages(prevMessages => {\r\n      const newMessages = [...prevMessages, newMessage];\r\n      return newMessages;\r\n    });\r\n  };\r\n\r\n  // Store our subscription settings in a ref. We don't want to change these over the course of the component's lifetime.\r\n  const subscriptionSettings = useRef({\r\n    [USER_JOINED]: data => {\r\n      handleMessage(data);\r\n    },\r\n    [USER_LEFT]: data => {\r\n      handleMessage(data);\r\n    },\r\n    [MEMBER_LIST]: data => {\r\n      handleMessage(data);\r\n    },\r\n    [NONEXISTANT_ROOM]: data => {\r\n      handleMessage(data);\r\n    },\r\n    [TIMER_SYNC]: data => {\r\n      if (data.message) handleMessage(data);\r\n    },\r\n    [GENERIC_MESSAGE]: data => {\r\n      handleMessage(data);\r\n    },\r\n  });\r\n  // Subscribe to the events above.\r\n  useSubscription(subscriptionSettings.current);\r\n\r\n  return (\r\n    <div className={className}>\r\n      {// Only show a portion of the latest messages.\r\n      messages.slice(MAX_MESSAGES * -1).map(msg => (\r\n        <SingleMessage key={`${msg.id}`} timestamp={msg.timestamp}>\r\n          {msg.content}\r\n        </SingleMessage>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nMessageDisplayBase.propTypes = {\r\n  className: PropTypes.string,\r\n};\r\n\r\nconst MessageDisplay = styled(MessageDisplayBase)`\r\n  position: absolute;\r\n  bottom: 2.5rem;\r\n  left: 0.25rem;\r\n  right: 0.25rem;\r\n  text-align: right;\r\n  z-index: 999;\r\n  user-select: none;\r\n  pointer-events: none;\r\n\r\n  & span {\r\n    text-align: left;\r\n  }\r\n`;\r\n\r\nexport default MessageDisplay;\r\n","import styled from 'styled-components';\n\nimport grid from 'easy-grid';\n\nconst GridBase = grid`\n    50%   50%\n50% A     B\n50% C     D\n`;\n\nconst Grid = styled(GridBase)`\n  width: calc(100vw - 1rem);\n  height: calc(100vw - 1rem);\n  margin: 0.5rem;\n`;\n\nexport default Grid;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Running = ({ food, timeLeft, className }) => {\r\n  return (\r\n    <div className={className}>\r\n      <p>{food} is cooking</p>\r\n      <h2>{timeLeft}</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nRunning.propTypes = {\r\n  food: PropTypes.string,\r\n  timeLeft: PropTypes.number,\r\n  className: PropTypes.string,\r\n};\r\n\r\nexport default Running;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n  padding: 1rem;\r\n  background-color: ${({ theme }) => theme.palette.primary.main};\r\n`;\r\n\r\nconst Stopped = ({ reset, className }) => {\r\n  return (\r\n    <div className={className}>\r\n      <p>Timer has stopped</p>\r\n      <Button type=\"button\" onClick={reset}>\r\n        OK\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nStopped.propTypes = {\r\n  reset: PropTypes.func,\r\n  className: PropTypes.string,\r\n};\r\n\r\nexport default Stopped;\r\n","import styled from 'styled-components';\nimport grid from 'easy-grid';\n\nconst GridBase = grid`\n    50% 50%\n50% A   B\n50% C   D\n`;\n\nconst Grid = styled(GridBase)`\n  width: 100%;\n  height: 100%;\n`;\n\nexport default Grid;\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst FoodSelectButtonBase = ({ onClick, children, className }) => {\n  return (\n    <button type=\"button\" onClick={onClick} className={className}>\n      {children}\n    </button>\n  );\n};\n\nconst FoodSelectButton = styled(FoodSelectButtonBase)`\n  position: relative;\n  margin: 0;\n  padding: 0rem;\n  border: none;\n  font: inherit;\n  color: inherit;\n  background-color: transparent;\n  /* show a hand cursor on hover; some argue that we\n  should keep the default arrow cursor for buttons */\n  cursor: pointer;\n\n  background-color: ${({ theme }) => theme.palette.primary.main};\n  color: ${({ theme }) => theme.palette.typography.dark};\n\n  width: calc(100% - 6px);\n  height: calc(100% - 6px);\n  margin: 3px;\n`;\n\nFoodSelectButtonBase.propTypes = {\n  onClick: PropTypes.func,\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]),\n  className: PropTypes.string,\n};\n\nexport default FoodSelectButton;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport TimerButtonGrid from '../../Generic/Grids/TimerButtonGrid';\r\nimport FoodSelectButton from '../FoodSelectButton';\r\n\r\nconst Select = ({ start, className }) => {\r\n  return (\r\n    <TimerButtonGrid className={className}>\r\n      <FoodSelectButton onClick={start('FISH')}>Fish</FoodSelectButton>\r\n      <FoodSelectButton onClick={start('TROPHY_FISH')}>\r\n        Trophy Fish\r\n      </FoodSelectButton>\r\n      <FoodSelectButton onClick={start('MEAT')}>Meat</FoodSelectButton>\r\n      <FoodSelectButton onClick={start('MONSTER_MEAT')}>\r\n        Monster meat\r\n      </FoodSelectButton>\r\n    </TimerButtonGrid>\r\n  );\r\n};\r\n\r\nSelect.propTypes = {\r\n  start: PropTypes.func,\r\n  className: PropTypes.string,\r\n};\r\n\r\nexport default Select;\r\n","import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useComms from '../hooks/useComms';\r\nimport Running from './TimerStates/Running';\r\nimport Stopped from './TimerStates/Stopped';\r\nimport Select from './TimerStates/Select';\r\n\r\nimport audioFile from '../../assets/sound/annoying-vuvuzela-tone.mp3';\r\n\r\nconst OnlineTimer = ({\r\n  id,\r\n  startDate,\r\n  state,\r\n  duration,\r\n  foodName,\r\n  className,\r\n}) => {\r\n  const { start, reset } = useComms();\r\n  const [soundHasPlayed, setSoundHasPlayed] = useState(false);\r\n\r\n  // When a new start date is given, reset sound so that it can be played.\r\n  useEffect(() => {\r\n    setSoundHasPlayed(false);\r\n  }, [startDate]);\r\n\r\n  /**\r\n   * Plays a sound effect.\r\n   */\r\n  const playSound = () => {\r\n    const audio = new Audio(audioFile);\r\n    audio.play();\r\n    setSoundHasPlayed(true);\r\n  };\r\n\r\n  /**\r\n   * Get remaining time in seconds.\r\n   */\r\n  const getTimeLeft = () => {\r\n    // Calculate time that has elapsed since starting the counter.\r\n    const currentTime = new Date();\r\n    const startTime = new Date(startDate); // Convert string to date\r\n    const timeElapsed = currentTime - startTime;\r\n\r\n    // Speed times up while in development\r\n    const timeLeft = duration - timeElapsed / 1000;\r\n\r\n    return Math.max(0, Math.round(timeLeft));\r\n  };\r\n\r\n  const timeLeft = getTimeLeft();\r\n\r\n  // Play sound if time has run out\r\n  if (timeLeft <= 0 && !soundHasPlayed) {\r\n    playSound();\r\n  }\r\n\r\n  if (state === 'RUNNING' && timeLeft > 0) {\r\n    return (\r\n      <Running food={foodName} timeLeft={timeLeft} className={className} />\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If timer is stopped (has just finished and needs to be reset)\r\n   */\r\n  if (state === 'STOPPED' || (timeLeft <= 0 && state === 'RUNNING')) {\r\n    return <Stopped reset={reset(id)} className={className} />;\r\n  }\r\n\r\n  /**\r\n   * If timer is idle.\r\n   */\r\n  if (state === 'SELECT') {\r\n    return <Select start={food => start(id, food)} className={className} />;\r\n  }\r\n\r\n  return <p>Unknown state</p>;\r\n};\r\n\r\nOnlineTimer.propTypes = {\r\n  className: PropTypes.string,\r\n  id: PropTypes.string,\r\n  startDate: PropTypes.string,\r\n  state: PropTypes.string,\r\n  duration: PropTypes.number,\r\n  foodName: PropTypes.string,\r\n};\r\n\r\nconst NewTimer = styled(OnlineTimer)`\r\n  height: calc(100% - 0.5rem);\r\n  width: calc(100% - 0.5rem);\r\n  padding: 0.1rem;\r\n  margin: 0.25rem;\r\n  background-color: ${({ theme }) => theme.palette.primary.dark};\r\n\r\n  text-align: center;\r\n`;\r\n\r\nexport default NewTimer;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\n\r\nimport { TIMER_SYNC } from '../actions/actions';\r\nimport useSubscription from '../hooks/useSubscription';\r\nimport useComms from '../hooks/useComms';\r\n\r\nimport FourByFourGrid from '../Generic/Grids/FourByFourGrid';\r\nimport OnlineTimer from './OnlineTimer';\r\n\r\nconst TimerGrid = () => {\r\n  // Store an array of timers we will later render into components.\r\n  const [timers, setTimers] = useState([]);\r\n  const timerCount = timers.length;\r\n\r\n  // Store our subscription settings in a ref. We don't want to change these over the course of the component's lifetime.\r\n  const subscriptionSettings = useRef({\r\n    [TIMER_SYNC]: data => {\r\n      setTimers(data.timers);\r\n    },\r\n  });\r\n  // Subscribe to the events above.\r\n  useSubscription(subscriptionSettings.current);\r\n\r\n  // Give this component an internal date that refreshes each timer.\r\n  const [, setDate] = useState(new Date());\r\n\r\n  // Ticking function to update the stored date.\r\n  const tick = () => {\r\n    setDate(new Date()); // This refreshes the component state and triggers a re-render (?)\r\n  };\r\n\r\n  const { requestTimers } = useComms();\r\n  /**\r\n   * Set up an internal interval to call tick()\r\n   * Runs on mount and clears itself on unmount.\r\n   */\r\n  useEffect(() => {\r\n    const timerID = setInterval(() => tick(), 200); // Tickrate influences the responsiveness of offline UI\r\n\r\n    // If no timers are present, request them.\r\n    if (timerCount < 1) {\r\n      requestTimers();\r\n    }\r\n\r\n    return function cleanup() {\r\n      clearInterval(timerID);\r\n    };\r\n  }, [timerCount, requestTimers]); // Only run on 'mount' and 'unmount'.\r\n\r\n  // If server hasn't sent us timers yet.\r\n  if (timers.length !== 4) {\r\n    return <p>No timers</p>;\r\n  }\r\n\r\n  return (\r\n    <FourByFourGrid>\r\n      {timers.map(timer => (\r\n        <OnlineTimer\r\n          key={timer.id}\r\n          id={timer.id}\r\n          startDate={timer.startDate}\r\n          duration={timer.duration}\r\n          foodName={timer.foodName}\r\n          state={timer.state}\r\n        />\r\n      ))}\r\n    </FourByFourGrid>\r\n  );\r\n};\r\n\r\nexport default TimerGrid;\r\n","import React, { useContext } from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport ConnectionContext from './contexts/ConnectionContext';\r\n\r\nconst RoomCodeDisplayBase = ({ className }) => {\r\n  // Get the room code from ConnectionContext\r\n  const { connection } = useContext(ConnectionContext);\r\n  const { roomCode } = connection;\r\n\r\n  return <p className={className}>Room {roomCode}</p>;\r\n};\r\n\r\nRoomCodeDisplayBase.propTypes = {\r\n  className: PropTypes.string,\r\n};\r\n\r\nconst RoomCodeDisplay = styled(RoomCodeDisplayBase)`\r\n  text-align: center;\r\n`;\r\n\r\nexport default RoomCodeDisplay;\r\n","import uuid from 'uuid/v4';\r\nimport Room from 'sea-of-thieves-cooking-timer-server/lib/types/Room'; // eslint-disable-line import/no-extraneous-dependencies\r\nimport Timer from 'sea-of-thieves-cooking-timer-server/lib/types/Timer'; // eslint-disable-line import/no-extraneous-dependencies\r\n\r\nimport { publish } from '../components/MessageCenter';\r\nimport * as actions from '../components/actions/actions';\r\n\r\n// Keep track of timers here.\r\nlet room;\r\n\r\nconst addTimers = amount => {\r\n  for (let i = 0; i < amount; i += 1) {\r\n    room.addTimer(new Timer(uuid()));\r\n  }\r\n};\r\n\r\nconst publishTimerSync = () => {\r\n  publish(actions.TIMER_SYNC, {\r\n    type: actions.TIMER_SYNC,\r\n    id: uuid(),\r\n    timestamp: new Date().toString(),\r\n    timers: room.timers,\r\n  });\r\n};\r\n\r\nconst fakeSocket = {\r\n  init: () => {\r\n    // console.log('fakeSocket init');\r\n\r\n    // Create a new room\r\n    const roomCode = 'LOCL';\r\n    room = new Room(roomCode);\r\n    // Populate it with timers.\r\n    addTimers(4);\r\n\r\n    publish(actions.ROOM_CREATED, roomCode);\r\n  },\r\n\r\n  // Actions emitted BY the fake socket.\r\n  on: (action, data) => console.log('fakeSocket on:', action, data),\r\n\r\n  // Actions that were emitted TO the fake socket.\r\n  emit: (action, data) => {\r\n    // console.log('fakeSocket emit:', action, data);\r\n\r\n    switch (action) {\r\n      case actions.REQUEST_TIMERS: {\r\n        publishTimerSync();\r\n        break;\r\n      }\r\n\r\n      case actions.START: {\r\n        const { id, food } = data;\r\n\r\n        // Start the timer\r\n        room.getTimer(id).start(food);\r\n\r\n        // Send a timer sync event\r\n        publishTimerSync();\r\n        break;\r\n      }\r\n\r\n      case actions.RESET: {\r\n        const { id } = data;\r\n        room.getTimer(id).reset();\r\n\r\n        publishTimerSync();\r\n        break;\r\n      }\r\n\r\n      default: {\r\n        publish(actions.GENERIC_MESSAGE, {\r\n          type: actions.GENERIC_MESSAGE,\r\n          id: uuid(),\r\n          timestamp: new Date().toString(),\r\n          message: `fakeSocket has no handler for your action. ${action}`,\r\n        });\r\n      }\r\n    }\r\n  },\r\n};\r\n\r\nexport default fakeSocket;\r\n","import _classCallCheck from \"/Users/misajokisalo/Projects/sea-of-thieves-cooking-timer/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/misajokisalo/Projects/sea-of-thieves-cooking-timer/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar Room =\n/*#__PURE__*/\nfunction () {\n  function Room(code) {\n    _classCallCheck(this, Room);\n\n    this.code = code;\n    this.members = {}; // id: { nickname: ___ }\n\n    this.timers = [];\n  }\n\n  _createClass(Room, [{\n    key: \"getMemberNames\",\n    value: function getMemberNames() {\n      var _this = this;\n\n      return Object.keys(this.members).map(function (id) {\n        return _this.members[id].nickname;\n      });\n    }\n  }, {\n    key: \"getMemberById\",\n    value: function getMemberById(id) {\n      return this.members[id];\n    }\n  }, {\n    key: \"addMember\",\n    value: function addMember(user) {\n      this.members[user.id] = user;\n    }\n  }, {\n    key: \"addTimer\",\n    value: function addTimer(timer) {\n      this.timers.push(timer);\n    }\n    /**\r\n     * Get a Timer by id.\r\n     */\n\n  }, {\n    key: \"getTimer\",\n    value: function getTimer(id) {\n      var iterations = this.timers.length;\n\n      for (var i = 0; i < iterations; i += 1) {\n        var timer = this.timers[i];\n\n        if (timer.id === id) {\n          return timer;\n        }\n      }\n\n      throw new Error(\"Could not find timer with id \".concat(id));\n    }\n  }]);\n\n  return Room;\n}();\n\nexport default Room;","import _classCallCheck from \"/Users/misajokisalo/Projects/sea-of-thieves-cooking-timer/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/misajokisalo/Projects/sea-of-thieves-cooking-timer/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar DEV = process.env.NODE_ENV !== 'production';\n/**\r\n * Foods that can be cooked and their durations.\r\n */\n\nvar foods = {\n  FISH: {\n    name: 'Fish',\n    duration: 40\n  },\n  TROPHY_FISH: {\n    name: 'Trophy Fish',\n    duration: 90\n  },\n  MEAT: {\n    name: 'Meat',\n    duration: 60\n  },\n  MONSTER_MEAT: {\n    name: 'Monster Meat',\n    duration: 120\n  }\n};\n\nvar Timer =\n/*#__PURE__*/\nfunction () {\n  function Timer(id) {\n    _classCallCheck(this, Timer);\n\n    this.id = id;\n    this.state = 'SELECT';\n    this.startDate;\n    this.duration;\n  }\n  /**\r\n   * Starts a timer with the given food.\r\n   */\n\n\n  _createClass(Timer, [{\n    key: \"start\",\n    value: function start(food) {\n      if (Object.keys(foods).includes(food)) {\n        this.state = 'RUNNING';\n        this.startDate = new Date().toString();\n        this.duration = foods[food].duration;\n        this.foodName = foods[food].name;\n        if (DEV) this.duration *= 0.05;\n        return this;\n      }\n\n      throw new TypeError(\"Cannot start a timer with food \".concat(food));\n    }\n    /**\r\n     * Resets a timer\r\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.state = 'SELECT';\n    }\n  }]);\n\n  return Timer;\n}();\n\nexport default Timer;","import React, { useRef, useCallback, useReducer } from 'react';\r\n\r\nimport ConnectionContext from './contexts/ConnectionContext';\r\nimport { createSocket, startListening } from '../services/socketHandler';\r\n\r\nimport Header from './Header';\r\nimport Welcome from './Welcome';\r\nimport AppControls from './AppControls';\r\nimport MessageDisplay from './MessageDisplay/MessageDisplay';\r\nimport TimerGrid from './Timers/TimerGrid';\r\nimport RoomCodeDisplay from './RoomCodeDisplay';\r\nimport fakeSocket from '../services/fakeSocket';\r\n\r\nconst initialState = {\r\n  state: 'SETUP',\r\n  socket: null,\r\n  roomCode: undefined,\r\n};\r\n\r\n/**\r\n * Actual main app content.\r\n */\r\nconst Main = () => {\r\n  // Create an empty socket and a mock socket.\r\n  const socket = useRef();\r\n\r\n  // Changes connection type and sets the communication object accordingly (socket vs. mock socket).\r\n  const connectionReducer = (state, action) => {\r\n    switch (action.type) {\r\n      // The user is selecting whether they want to be online or offline.\r\n      case 'SETUP':\r\n        return { state: 'SETUP', socket: null };\r\n\r\n      // The user wants to be offline.\r\n      case 'OFFLINE':\r\n        // Initialize the fake socket\r\n        /**\r\n         * fakeSocket.init() should happen after fakeSocket is set into the state.\r\n         * TimerGrid is mounted after socket inits so it never gets the 'TIMER_SYNC' event.\r\n         * Alternatively TimerGrid should ask for timers once it mounts.\r\n         */\r\n        fakeSocket.init();\r\n        if (socket.current === undefined) {\r\n          socket.current = fakeSocket;\r\n        }\r\n        return { state: 'OFFLINE', socket: socket.current };\r\n\r\n      // The user wants to go online and is selecting a room to join (or create).\r\n      case 'ONLINE_SETUP':\r\n        // If no socket has been set, create a new one.\r\n        // We add this directly to the socket ref to prevent unnecessary changes to it in the future.\r\n        if (socket.current === undefined) {\r\n          socket.current = createSocket();\r\n\r\n          // Initialize event listeners on the socket.\r\n          startListening(socket.current);\r\n        }\r\n        return { state: 'ONLINE_SETUP', socket: socket.current };\r\n\r\n      // The user is finally online and in a room.\r\n      case 'ONLINE': {\r\n        return { ...state, state: 'ONLINE', roomCode: action.roomCode };\r\n      }\r\n\r\n      default:\r\n        throw new Error(\r\n          `Action of type ${\r\n            action ? action.type : '(action is undefined)'\r\n          } is not supported }`,\r\n        );\r\n    }\r\n  };\r\n\r\n  // Memoize the callback so React doesn't have to check if it has changed UNLESS socket has changed.\r\n  const memoizedConnectionReducer = useCallback(connectionReducer, [socket]);\r\n\r\n  const [connection, dispatch] = useReducer(\r\n    memoizedConnectionReducer,\r\n    initialState,\r\n  );\r\n  const connectionValue = { connection, dispatch }; // Provide this to context consumers.\r\n  const { state } = connection;\r\n\r\n  const OfflineContent = <TimerGrid />;\r\n  const OnlineContent = (\r\n    <>\r\n      <RoomCodeDisplay />\r\n      <TimerGrid />\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <ConnectionContext.Provider value={connectionValue}>\r\n      <Header />\r\n      {(state === 'SETUP' || state === 'ONLINE_SETUP') && <Welcome />}\r\n      {state === 'OFFLINE' && OfflineContent}\r\n      {state === 'ONLINE' && OnlineContent}\r\n      <MessageDisplay />\r\n      <AppControls />\r\n    </ConnectionContext.Provider>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\n\nimport { ThemeProvider } from 'styled-components';\nimport WebFont from 'webfontloader';\n\nimport theme from './styles/theme';\nimport GlobalStyles from './styles/GlobalStyles';\n\nimport Main from './components/Main';\n\nWebFont.load({\n  google: {\n    families: ['Montserrat:500,600,800', 'serif'],\n  },\n});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <React.Fragment>\n        <GlobalStyles />\n        <Main />\n      </React.Fragment>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/annoying-vuvuzela-tone.7c0e3fdb.mp3\";"],"sourceRoot":""}