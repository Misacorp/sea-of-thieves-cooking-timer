{"version":3,"sources":["assets/sound/annoying-vuvuzela-tone.mp3","styles/theme.jsx","styles/GlobalStyles.jsx","components/Header.jsx","components/contexts/SocketContext.jsx","components/Generic/Grids/FourByFourGrid.jsx","types/foods.jsx","components/Generic/Grids/TimerButtonGrid.jsx","components/FoodSelectButton.jsx","components/Timers/Timer.jsx","components/Timers/TimerGrid.jsx","components/AppControls.jsx","components/Main.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","baseFonts","theme","palette","primary","main","light","dark","secondary","success","error","typography","base","fontFamily","join","title","concat","emoji","transition","duration","timingFunction","appDrawer","width","mobile","open","closed","desktop","GlobalStyles","createGlobalStyle","_templateObject","_ref","_ref2","_ref3","props","Header","styled","className","react_default","a","createElement","Header_templateObject","Socket","createContext","GridBase","grid","FourByFourGrid_templateObject","Grid","_templateObject2","foods","FISH","TROPHY_FISH","MEAT","MONSTER_MEAT","TEST","null","TimerButtonGrid_templateObject","TimerButtonGrid_templateObject2","FoodSelectButton","onClick","children","type","FoodSelectButton_templateObject","NewTimer","id","uuid","socket","useContext","_useState","useState","_useState2","Object","slicedToArray","food","setFood","_useState3","_useState4","running","setRunning","_useState5","_useState6","startDate","setStartDate","localStart","data","Date","date","start","newFood","keys","includes","emit","localStop","Audio","audioFile","play","on","timeElapsed","timeLeft","Math","round","getTimeLeft","TimerButtonGrid","components_FoodSelectButton","Timer_templateObject","NewTimerGrid","setSocket","useEffect","online","console","log","openSocket","forceNew","disconnect","setDate","timerID","setInterval","clearInterval","SocketContext","Provider","value","FourByFourGrid","Timer","AppControls","AppControls_templateObject","Main","Fragment","components_Header","TimerGrid","components_AppControls","WebFont","load","google","families","App","styled_components_browser_esm","styles_GlobalStyles","components_Main","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6ae8c505.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/annoying-vuvuzela-tone.7c0e3fdb.mp3\";","const baseFonts = ['Roboto', 'Arial', 'sans-serif'];\n\nexport default {\n  palette: {\n    primary: {\n      main: '#efd71f',\n      light: '#fff8bf',\n      dark: '#59563d',\n    },\n    secondary: {\n      main: '#FFE2BC',\n      light: '#FFF9F0',\n      dark: '#C79349',\n    },\n    success: {\n      main: '#319F4A',\n      light: '#55D370',\n      dark: '#257134',\n    },\n    error: {\n      main: '#D34E41',\n      light: '#FF7365',\n      dark: '#953930',\n    },\n    typography: {\n      light: '#FFFFFF',\n      dark: '#020202',\n    },\n  },\n  typography: {\n    base: {\n      fontFamily: baseFonts.join(','),\n    },\n    title: {\n      fontFamily: ['Montserrat', ...baseFonts].join(','),\n    },\n  },\n  emoji: 'ðŸ¥¥',\n  transition: {\n    duration: '0.2s',\n    timingFunction: 'ease-out',\n  },\n  appDrawer: {\n    width: {\n      mobile: {\n        open: '90vw',\n        closed: '0',\n      },\n      desktop: {\n        open: '240px',\n        closed: '0',\n      },\n    },\n  },\n};\n","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyles = createGlobalStyle`\n  body {\n    font-family: ${({ theme }) => theme.typography.base.fontFamily};\n    color: ${({ theme }) => theme.palette.typography.light};\n    background-color: #1A1A1A;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    font-family: ${({ theme }) => theme.typography.title.fontFamily};\n    font-weight: 600;\n\n    svg {\n      vertical-align: middle;\n      margin-right: 0.3em;\n      margin-top: -0.5%;\n    }\n  }\n\n  h1, h2 {\n    font-weight: 700;\n  }\n\n  h3 {\n    color: ${props => props.theme.palette.primary.dark}\n  }\n`;\n\nexport default GlobalStyles;\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst HeaderContent = ({ className }) => {\n  return (\n    <div className={className}>\n      <h1>Cooking Timer</h1>\n    </div>\n  );\n};\n\nHeaderContent.propTypes = {\n  className: PropTypes.string,\n};\n\nconst Header = styled(HeaderContent)`\n  height: 50px;\n  background-color: ${({ theme }) => theme.palette.primary.main};\n  color: black;\n\n  h1 {\n    margin: 0;\n    padding: 0.5rem 0.25rem;\n    text-align: center;\n  }\n`;\n\nexport default Header;\n","import { createContext } from 'react';\n\nconst Socket = createContext(null);\n\nexport default Socket;\n","import styled from 'styled-components';\n\nimport grid from 'easy-grid';\n\nconst GridBase = grid`\n    50%   50%\n50% A     B\n50% C     D\n`;\n\nconst Grid = styled(GridBase)`\n  width: calc(100vw - 1rem);\n  height: calc(100vw - 1rem);\n  margin: 0.5rem;\n`;\n\nexport default Grid;\n","const foods = {\n  FISH: {\n    duration: 40,\n  },\n  TROPHY_FISH: {\n    duration: 90,\n  },\n  MEAT: {\n    duration: 60,\n  },\n  MONSTER_MEAT: {\n    duration: 120,\n  },\n  TEST: {\n    duration: 2,\n  },\n  null: {\n    duration: 0,\n  },\n};\n\nexport default foods;\n","import styled from 'styled-components';\nimport grid from 'easy-grid';\n\nconst GridBase = grid`\n    50% 50%\n50% A   B\n50% C   D\n`;\n\nconst Grid = styled(GridBase)`\n  width: 100%;\n  height: 100%;\n`;\n\nexport default Grid;\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst FoodSelectButtonBase = ({ onClick, children, className }) => {\n  return (\n    <button type=\"button\" onClick={onClick} className={className}>\n      {children}\n    </button>\n  );\n};\n\nconst FoodSelectButton = styled(FoodSelectButtonBase)`\n  position: relative;\n  margin: 0;\n  padding: 0rem;\n  border: none;\n  font: inherit;\n  color: inherit;\n  background-color: transparent;\n  /* show a hand cursor on hover; some argue that we\n  should keep the default arrow cursor for buttons */\n  cursor: pointer;\n\n  background-color: ${({ theme }) => theme.palette.primary.main};\n  color: ${({ theme }) => theme.palette.typography.dark};\n\n  width: calc(100% - 6px);\n  height: calc(100% - 6px);\n  margin: 3px;\n`;\n\nFoodSelectButtonBase.propTypes = {\n  onClick: PropTypes.func,\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]),\n  className: PropTypes.string,\n};\n\nexport default FoodSelectButton;\n","import React, { useState, useContext } from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport uuid from 'uuid/v4';\n\nimport Socket from '../contexts/SocketContext';\nimport foods from '../../types/foods';\nimport TimerButtonGrid from '../Generic/Grids/TimerButtonGrid';\nimport FoodSelectButton from '../FoodSelectButton';\n\nimport audioFile from '../../assets/sound/annoying-vuvuzela-tone.mp3';\n\nconst NewTimerBase = ({ className }) => {\n  // Give the timer a unique unchanging ID throughout the session.\n  const id = uuid();\n\n  // Connect to the context's socket\n  const socket = useContext(Socket);\n\n  // Keep track of the food being cooked.\n  const [food, setFood] = useState(null);\n\n  const [running, setRunning] = useState(false);\n\n  // Asks the server to start the timer with the given food\n  const [startDate, setStartDate] = useState(null);\n\n  /**\n   * Start the timer locally.\n   * Used when there is no socket connection or even when there is!\n   */\n  const localStart = data => {\n    setFood(data.food);\n    setStartDate(new Date(data.date));\n    setRunning(true);\n  };\n\n  const start = newFood => () => {\n    if (Object.keys(foods).includes(newFood)) {\n      if (socket) {\n        socket.emit('start', { id, food: newFood });\n      } else {\n        localStart({ food: newFood, date: new Date() });\n      }\n    }\n  };\n\n  /**\n   * Stop the timer locally.\n   * Clears currently set food.\n   * Used when there is no socket connection or even when there is!\n   */\n  const localStop = () => {\n    setRunning(false);\n    setFood(null);\n\n    const audio = new Audio(audioFile);\n    audio.play();\n  };\n\n  const stop = () => {\n    // Tell the server to stop the timer.\n    if (socket) {\n      socket.emit('stop', { id });\n    }\n    localStop();\n  };\n\n  /**\n   * Get remaining time in seconds.\n   */\n  const getTimeLeft = () => {\n    if (running) {\n      // Calculate time that has elapsed since starting the counter.\n      const currentTime = new Date();\n      const timeElapsed = currentTime - startDate;\n\n      // Calculate seconds that are left\n      let { duration } = foods[food];\n\n      // Speed times up while in development\n      if (process.env.NODE_ENV === 'development') {\n        duration *= 0.05;\n      }\n      const timeLeft = duration - timeElapsed / 1000;\n\n      // Stop the timer if we reach 0\n      if (timeLeft <= 0) {\n        stop();\n      }\n\n      return Math.round(timeLeft);\n    }\n\n    return 0;\n  };\n\n  /**\n   * Listen to messages from the server.\n   */\n  if (socket) {\n    socket.on('start', data => {\n      // Set this timer with the values in data\n      if (data.id === id) {\n        localStart();\n      }\n    });\n\n    // Stop a timer when the server tells us to.\n    socket.on('stop', data => {\n      if (data.id === id) {\n        localStop();\n      }\n    });\n  }\n\n  if (food) {\n    // If a food is set, the timer is either RUNNING or PAUSED.\n    return (\n      <div className={className}>\n        <p>{food} is cooking</p>\n        <h2>{running ? getTimeLeft() : 'PAUSED'}</h2>\n      </div>\n    );\n  }\n\n  return (\n    <TimerButtonGrid className={className}>\n      <FoodSelectButton onClick={start('FISH')}>Fish</FoodSelectButton>\n      <FoodSelectButton onClick={start('TROPHY_FISH')}>\n        Trophy Fish\n      </FoodSelectButton>\n      <FoodSelectButton onClick={start('MEAT')}>Meat</FoodSelectButton>\n      <FoodSelectButton onClick={start('MONSTER_MEAT')}>\n        Monster meat\n      </FoodSelectButton>\n    </TimerButtonGrid>\n  );\n};\n\nNewTimerBase.propTypes = {\n  className: PropTypes.string,\n};\n\nconst NewTimer = styled(NewTimerBase)`\n  height: calc(100% - 0.5rem);\n  width: calc(100% - 0.5rem);\n  padding: 0.1rem;\n  margin: 0.25rem;\n  background-color: ${({ theme }) => theme.palette.primary.dark};\n\n  text-align: center;\n`;\n\nexport default NewTimer;\n","import React, { useState, useEffect } from 'react';\nimport openSocket from 'socket.io-client';\n\nimport Socket from '../contexts/SocketContext';\nimport FourByFourGrid from '../Generic/Grids/FourByFourGrid';\nimport Timer from './Timer';\n\nconst NewTimerGrid = props => {\n  // Create a socket.\n  const [socket, setSocket] = useState(null);\n\n  /**\n   * Connect to the socket if the user goes online.\n   */\n  useEffect(() => {\n    const { online } = props;\n    if (online) {\n      console.log('ðŸŒ· Connecting to socket');\n\n      // Determine the server URL\n      const serverUrl =\n        process.env.NODE_ENV === 'development'\n          ? 'http://localhost:1338'\n          : '__heroku_address_here__';\n\n      setSocket(\n        openSocket(serverUrl, {\n          forceNew: true,\n        }),\n      );\n\n      return () => {\n        console.log('ðŸ¥€ Disconnecting from socket');\n        socket.disconnect(true);\n      };\n    }\n\n    return undefined;\n  }, [props]);\n\n  /**\n   * Monitor changes to socket connection.\n   */\n  useEffect(() => {\n    if (socket) {\n      socket.on('disconnect', () => {\n        console.log('Socket is DOWN');\n      });\n\n      socket.on('connect_error', () => {\n        console.log('Socket is DOWN');\n      });\n\n      socket.on('connect', () => {\n        console.log('Socket is UP');\n      });\n    }\n  }, [socket]);\n\n  // Give this component an internal date that refreshes each timer.\n  const [, setDate] = useState(new Date());\n\n  // Ticking function to update the stored date.\n  const tick = () => {\n    setDate(new Date()); // This refreshes the component state and triggers a re-render (?)\n  };\n\n  /**\n   * Set up an internal interval to call tick()\n   * Runs on mount and clears itself on unmount.\n   */\n  useEffect(() => {\n    const timerID = setInterval(() => tick(), 100);\n\n    return function cleanup() {\n      clearInterval(timerID);\n    };\n  }, []); // Only run on 'mount' and 'unmount'.\n\n  return (\n    <Socket.Provider value={socket}>\n      <FourByFourGrid>\n        <Timer />\n        <Timer />\n        <Timer />\n        <Timer />\n      </FourByFourGrid>\n    </Socket.Provider>\n  );\n};\n\nexport default NewTimerGrid;\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst AppControlsContent = ({ className }) => {\n  return (\n    <div className={className}>\n      <div>App Controls here</div>\n    </div>\n  );\n};\n\nAppControlsContent.propTypes = {\n  className: PropTypes.string,\n};\n\nconst AppControls = styled(AppControlsContent)`\n  height: 30px;\n  background-color: #efd71f;\n  color: black;\n\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  text-align: center;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport default AppControls;\n","import React from 'react';\r\n\r\nimport Header from './Header';\r\nimport NewTimerGrid from './Timers/TimerGrid';\r\nimport AppControls from './AppControls';\r\n\r\n/**\r\n * Actual main app content.\r\n */\r\nconst Main = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <Header />\r\n      <NewTimerGrid />\r\n      <AppControls />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\n\nimport { ThemeProvider } from 'styled-components';\nimport WebFont from 'webfontloader';\n\nimport theme from './styles/theme';\nimport GlobalStyles from './styles/GlobalStyles';\n\nimport Main from './components/Main';\n\nWebFont.load({\n  google: {\n    families: ['Montserrat:500,600,800', 'serif'],\n  },\n});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <React.Fragment>\n        <GlobalStyles />\n        <Main />\n      </React.Fragment>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}