{"version":3,"sources":["styles/theme.jsx","styles/GlobalStyles.jsx","components/Header.jsx","types/routes.js","components/AppControls.jsx","components/Generic/LinkButton.jsx","services/fakeSocket.js","components/Welcome.jsx","../../server/lib/types/Room.js","../../server/lib/types/Timer.js","components/MessageCenter.js","components/actions/actions.js","components/contexts/ConnectionContext.jsx","components/hooks/useSubscription.jsx","components/hooks/useComms.jsx","components/Generic/Grids/FourByFourGrid.jsx","components/Timers/TimerStates/Running.jsx","components/Timers/TimerStates/Stopped.jsx","components/Generic/Grids/TimerButtonGrid.jsx","components/Timers/FoodSelectButton.jsx","components/Timers/TimerStates/Select.jsx","components/Timers/OnlineTimer.jsx","components/Timers/TimerGrid.jsx","components/Offline.jsx","components/Generic/Button.jsx","components/Generic/Divider.jsx","components/Generic/Input.jsx","components/RoomSelect.jsx","components/RoomCodeDisplay.jsx","services/localStorageHandler.js","components/OnlineRoom.jsx","services/socketHandler.js","components/Online.jsx","components/MessageDisplay/SingleMessage.jsx","types/messageTemplates.js","types/message.js","components/MessageDisplay/MessageDisplay.jsx","components/Main.jsx","App.js","serviceWorker.js","index.js","assets/sound/annoying-vuvuzela-tone.mp3"],"names":["baseFonts","theme","palette","primary","main","light","dark","secondary","success","error","disabled","typography","base","fontFamily","join","title","concat","emoji","transition","duration","timingFunction","appDrawer","width","mobile","open","closed","desktop","GlobalStyles","createGlobalStyle","_templateObject","_ref","_ref2","_ref3","props","Header","styled","className","react_default","a","createElement","react_router_dom","to","Header_templateObject","AppControls","AppControls_templateObject","room","LinkButton","children","LinkButton_templateObject","variant","_ref4","_ref5","_ref6","_ref7","Welcome","Fragment","Generic_LinkButton","types_Room","Room","code","Object","classCallCheck","this","members","timers","abandonedSince","createClass","key","value","_this","keys","map","id","nickname","user","length","Date","timer","push","iterations","i","Error","foods","FISH","name","TROPHY_FISH","MEAT","MONSTER_MEAT","types_Timer","Timer","state","startDate","food","includes","toString","foodName","TypeError","MessageCenter","Subject","publish","topic","data","next","publishTimerSync","type","uuid","timestamp","fakeSocket","init","amount","addTimer","addTimers","on","action","console","log","emit","getTimer","start","reset","message","ConnectionContext","createContext","useSubscription","subs","subscription","useRef","useEffect","topics","current","pipe","filter","subscribe","unsubscribe","useComms","socket","useContext","joinRoom","useCallback","roomCode","createRoom","requestTimers","GridBase","grid","FourByFourGrid_templateObject","Grid","_templateObject2","Running","timeLeft","Button","button","Stopped_templateObject","Stopped","onClick","TimerButtonGrid_templateObject","TimerButtonGrid_templateObject2","FoodSelectButton","FoodSelectButton_templateObject","Select","TimerButtonGrid","Timers_FoodSelectButton","NewTimer","_useComms","_useState","useState","_useState2","slicedToArray","soundHasPlayed","setSoundHasPlayed","currentTime","startTime","Math","max","round","getTimeLeft","Audio","audioFile","play","TimerStates_Running","TimerStates_Stopped","TimerStates_Select","OnlineTimer_templateObject","TimerGrid","setTimers","timerCount","subscriptionSettings","defineProperty","_useState3","setDate","timerID","setInterval","clearInterval","FourByFourGrid","Timers_OnlineTimer","Offline","contexts_ConnectionContext","Provider","Timers_TimerGrid","rest","objectWithoutProperties","assign","Button_templateObject","DividerText","p","Divider_templateObject","Divider","Divider_templateObject2","Input","input","Input_templateObject","RoomSelect","_useContext","setNickname","activeRoomCode","setActiveRoomCode","nicknameIsValid","setRoomCode","roomCodeIsValid","roomCodeParam","createdRoomCode","_useState4","status","setStatus","react_router","Generic_Input","onChange","event","newName","target","placeholder","aria-label","aria-required","style","marginBottom","Generic_Button","Generic_Divider","newRoomCode","toUpperCase","RoomSelect_templateObject","RoomCodeDisplay","RoomCodeDisplay_templateObject","OnlineRoom","_useRef","nicknameValid","match","params","obj","forEach","ls","components_RoomCodeDisplay","createSocket","io","initialNickname","Online","undefined","startListening","connection","newNickname","path","component","TimeContainer","span","SingleMessage_templateObject","fadeOut","keyframes","SingleMessage_templateObject2","Message","date","getHours","getMinutes","_templateObject3","messageTemplates","memberString","content","MessageDisplay","messages","setMessages","handleMessage","otherData","newMessage","prevMessages","toConsumableArray","slice","MAX_MESSAGES","msg","SingleMessage","MessageDisplay_templateObject","Main","components_Header","exact","MessageDisplay_MessageDisplay","components_AppControls","WebFont","load","google","families","prodBasename","App","styled_components_browser_esm","styles_GlobalStyles","basename","components_Main","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports","__webpack_require__"],"mappings":"iMAAMA,EAAY,CAAC,SAAU,QAAS,cAEvBC,EAAA,CACbC,QAAS,CACPC,QAAS,CACPC,KAAM,UACNC,MAAO,UACPC,KAAM,WAERC,UAAW,CACTH,KAAM,UACNC,MAAO,UACPC,KAAM,WAERE,QAAS,CACPJ,KAAM,UACNC,MAAO,UACPC,KAAM,WAERG,MAAO,CACLL,KAAM,UACNC,MAAO,UACPC,KAAM,WAERI,SAAU,CACRN,KAAM,WAERO,WAAY,CACVN,MAAO,UACPC,KAAM,YAGVK,WAAY,CACVC,KAAM,CACJC,WAAYb,EAAUc,KAAK,MAE7BC,MAAO,CACLF,WAAY,CAAC,cAADG,OAAkBhB,GAAWc,KAAK,OAGlDG,MAAO,eACPC,WAAY,CACVC,SAAU,OACVC,eAAgB,YAElBC,UAAW,CACTC,MAAO,CACLC,OAAQ,CACNC,KAAM,OACNC,OAAQ,KAEVC,QAAS,CACPF,KAAM,QACNC,OAAQ,gbCnDhB,IA2BeE,EA3BMC,4BAAHC,IAEC,SAAAC,GAAA,OAAAA,EAAG7B,MAAkBU,WAAWC,KAAKC,YAC3C,SAAAkB,GAAA,OAAAA,EAAG9B,MAAkBC,QAAQS,WAAWN,OAKlC,SAAA2B,GAAA,OAAAA,EAAG/B,MAAkBU,WAAWI,MAAMF,YAe5C,SAAAoB,GAAK,OAAIA,EAAMhC,MAAMC,QAAQC,QAAQG,wOCnBlD,IA0Be4B,EAZAC,kBAdO,SAAAL,GAAmB,IAAhBM,EAAgBN,EAAhBM,UACvB,OACEC,EAAAC,EAAAC,cAAA,OAAKH,UAAWA,GACdC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GCTC,KDULJ,EAAAC,EAAAC,cAAA,8BAUOJ,CAAHO,IAEU,SAAAX,GAAA,OAAAA,EAAG9B,MAAkBC,QAAQC,QAAQC,0SElB3D,IA4BeuC,EAhBKR,kBAZO,SAAAL,GAAmB,IAAhBM,EAAgBN,EAAhBM,UAC5B,OACEC,EAAAC,EAAAC,cAAA,OAAKH,UAAWA,GACdC,EAAAC,EAAAC,cAAA,kCAScJ,CAAHS,wZCTjB,ICCIC,EDiCWC,EApBIX,kBAdI,SAAAL,GAAiC,IAA9BW,EAA8BX,EAA9BW,GAAIL,EAA0BN,EAA1BM,UAAWW,EAAejB,EAAfiB,SACvC,OACEV,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAIA,EAAIL,UAAWA,GACtBW,IAWYZ,CAAHa,IACH,SAAAjB,GAAA,MAA8B,WAA9BA,EAAGkB,QAAsC,eAAiB,SACjD,SAAAjB,GAAA,OAAAA,EAAG/B,MAAkBC,QAAQC,QAAQC,MAChD,SAAA8C,GAAA,OAAAA,EAAGjD,MAAkBC,QAAQS,WAAWL,MAGlC,SAAA6C,GAAA,MAA8B,WAA9BA,EAAGF,QAAsC,SAAW,QACnD,SAAAG,GAAA,MAA8B,WAA9BA,EAAGH,QAAsC,SAAW,QAQ9C,SAAAI,GAAA,OAAAA,EAAGpD,MAAkBC,QAAQQ,SAASN,OEd/CkD,EAbC,WACd,OACEjB,EAAAC,EAAAC,cAACF,EAAAC,EAAMiB,SAAP,KACElB,EAAAC,EAAAC,cAACiB,EAAD,CAAYf,GJXF,WIWeQ,QAAQ,UAAjC,WAGAZ,EAAAC,EAAAC,cAACiB,EAAD,CAAYf,GJbE,UIaeQ,QAAQ,UAArC,6CC6DSQ,EAvEf,WACA,SAAAC,EAAAC,GACIC,OAAAC,EAAA,EAAAD,CAAeE,KAAAJ,GAEnBI,KAAAH,OACAG,KAAAC,QAAA,GAEAD,KAAAE,OAAA,GACAF,KAAAG,eAAA,KA4DA,OAzDEL,OAAAM,EAAA,EAAAN,CAAYF,EAAA,EACdS,IAAA,iBACAC,MAAA,WACA,IAAAC,EAAAP,KAEA,OAAAF,OAAAU,KAAAR,KAAAC,SAAAQ,IAAA,SAAAC,GACA,OAAAH,EAAAN,QAAAS,GAAAC,aAGG,CACHN,IAAA,gBACAC,MAAA,SAAAI,GACA,OAAAV,KAAAC,QAAAS,KAEG,CACHL,IAAA,YACAC,MAAA,SAAAM,GACAZ,KAAAC,QAAAW,EAAAF,IAAAE,EACAZ,KAAAG,eAAA,OAEG,CACHE,IAAA,eACAC,MAAA,SAAAI,UACAV,KAAAC,QAAAS,GAEAZ,OAAAU,KAAAR,KAAAC,SAAAY,OAEA,IACAb,KAAAG,eAAA,IAAAW,QAGG,CACHT,IAAA,WACAC,MAAA,SAAAS,GACAf,KAAAE,OAAAc,KAAAD,KAMG,CACHV,IAAA,WACAC,MAAA,SAAAI,GAGA,IAFA,IAAAO,EAAAjB,KAAAE,OAAAW,OAEAK,EAAA,EAAqBA,EAAAD,EAAgBC,GAAA,GACrC,IAAAH,EAAAf,KAAAE,OAAAgB,GAEA,GAAAH,EAAAL,OACA,OAAAK,EAIA,UAAAI,MAAA,gCAAAjE,OAAAwD,QAIAd,EApEA,GCEAwB,EAAA,CACAC,KAAA,CACAC,KAAA,OACAjE,SAAA,IAEAkE,YAAA,CACAD,KAAA,cACAjE,SAAA,IAEAmE,KAAA,CACAF,KAAA,OACAjE,SAAA,IAEAoE,aAAA,CACAH,KAAA,eACAjE,SAAA,MAgDeqE,EA1Cf,WACA,SAAAC,EAAAjB,GACIZ,OAAAC,EAAA,EAAAD,CAAeE,KAAA2B,GAEnB3B,KAAAU,KACAV,KAAA4B,MAAA,SACA5B,KAAA6B,UACA7B,KAAA3C,SAgCA,OAzBEyC,OAAAM,EAAA,EAAAN,CAAY6B,EAAA,EACdtB,IAAA,QACAC,MAAA,SAAAwB,GACA,GAAAhC,OAAAU,KAAAY,GAAAW,SAAAD,GAMA,OALA9B,KAAA4B,MAAA,UACA5B,KAAA6B,WAAA,IAAAf,MAAAkB,WACAhC,KAAA3C,SAAA+D,EAAAU,GAAAzE,SACA2C,KAAAiC,SAAAb,EAAAU,GAAAR,KAEAtB,KAGA,UAAAkC,UAAA,kCAAAhF,OAAA4E,MAMG,CACHzB,IAAA,QACAC,MAAA,WACAN,KAAA4B,MAAA,aAIAD,EAvCA,GCvBMQ,EAAgB,WAAIC,GAOpBC,EAAU,SAACC,EAAOC,GAAR,OAAiBJ,EAAcK,KAAK,CAAEF,QAAOC,UAG9CJ,IJCTM,EAAmB,WACvBJ,EKNwB,aLMI,CAC1BK,KKPsB,aLQtBhC,GAAIiC,MACJC,WAAW,IAAI9B,MAAOkB,WACtB9B,OAAQnB,EAAKmB,UA6DF2C,EAzDI,CACjBC,KAAM,WAKJ/D,EAAO,IAAIa,EADM,QApBH,SAAAmD,GAChB,IAAK,IAAI7B,EAAI,EAAGA,EAAI6B,EAAQ7B,GAAK,EAC/BnC,EAAKiE,SAAS,IAAIrB,EAAMgB,QAqBxBM,CAAU,GAEVZ,EK1BwB,eLqBP,SASnBa,GAAI,SAACC,EAAQZ,GAAT,OAAkBa,QAAQC,IAAI,iBAAkBF,EAAQZ,IAG5De,KAAM,SAACH,EAAQZ,GAGb,OAAQY,GACN,IKpCwB,iBLqCtBV,IACA,MAGF,IKjDe,QLiDK,IACV/B,EAAa6B,EAAb7B,GAAIoB,EAASS,EAATT,KAGZ/C,EAAKwE,SAAS7C,GAAI8C,MAAM1B,GAGxBW,IACA,MAGF,IK3De,QL2DK,IACV/B,EAAO6B,EAAP7B,GACR3B,EAAKwE,SAAS7C,GAAI+C,QAElBhB,IACA,MAGF,QACEJ,EK3DuB,kBL2DU,CAC/BK,KK5DqB,kBL6DrBhC,GAAIiC,MACJC,WAAW,IAAI9B,MAAOkB,WACtB0B,QAAO,8CAAAxG,OAAgDiG,QMvElDQ,EAFWC,wBAAc,6BCkCzBC,EAxBS,SAAAC,GACtB,IAAMC,EAAeC,mBAoBrB,OAlBAC,oBAAU,WACR,IAAMC,EAASpE,OAAOU,KAAKsD,GAW3B,OAPAC,EAAaI,QAAUhC,EAAciC,KACnCC,YAAO,SAAArG,GAAA,IAAGsE,EAAHtE,EAAGsE,MAAH,OAAe4B,EAAOnC,SAASO,MACtCgC,UAAU,SAAArG,GAAqB,IAAlBqE,EAAkBrE,EAAlBqE,MAAOC,EAAWtE,EAAXsE,KAEpBuB,EAAKxB,GAAOC,KAGP,WAELwB,EAAaI,QAAQI,gBAEtB,CAACT,IAEGC,GC8BMS,EArDE,WAAM,IAEbC,EAAWC,qBAAWf,GAAtBc,OACR,IAAKA,EACH,MAAM,IAAItD,MAAM,sBAQlB,IAaMwD,EAAWC,sBACf,SAACC,EAAUlE,GACT8D,EAAOnB,KHpCY,YGoCY,CAAEuB,WAAUlE,cAE7C,CAAC8D,IAqBH,MAAO,CAAEjB,MAtCK,SAAC9C,EAAIoB,GAAL,OAAc,WAC1B2C,EAAOnB,KHrBU,QGqBU,CAAE5C,KAAIoB,WAqCnB2B,MAlCF,SAAA/C,GAAE,OAAI,WAClB+D,EAAOnB,KHxBU,QGwBU,CAAE5C,SAiCRoE,WAfJF,sBACjB,SAAAjE,GACM8D,EACFA,EAAOnB,KHhDY,cGgDc,CAAE3C,aAEnCyC,QAAQC,IAAI,aAAcoB,IAG9B,CAACA,IAOgCE,WAAUI,cAJvB,WACpBN,EAAOnB,KH/CmB,6SIN9B,IAAM0B,EAAWC,IAAHC,KAYCC,EANF9G,kBAAO2G,EAAP3G,CAAH+G,KCQKC,EAfC,SAAArH,GAAmC,IAAhC8D,EAAgC9D,EAAhC8D,KAAMwD,EAA0BtH,EAA1BsH,SAAUhH,EAAgBN,EAAhBM,UACjC,OACEC,EAAAC,EAAAC,cAAA,OAAKH,UAAWA,GACdC,EAAAC,EAAAC,cAAA,SAAIqD,EAAJ,eACAvD,EAAAC,EAAAC,cAAA,UAAK6G,wHCHX,IAAMC,EAASlH,UAAOmH,OAAVC,IAEU,SAAAzH,GAAA,OAAAA,EAAG7B,MAAkBC,QAAQC,QAAQC,OAmB5CoJ,EAhBC,SAAAzH,GAA0B,IAAvBwF,EAAuBxF,EAAvBwF,MAAOnF,EAAgBL,EAAhBK,UACxB,OACEC,EAAAC,EAAAC,cAAA,OAAKH,UAAWA,GACdC,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAC8G,EAAD,CAAQ7C,KAAK,SAASiD,QAASlC,GAA/B,4NCVN,IAAMuB,GAAWC,IAAHW,MAWCT,GALF9G,kBAAO2G,GAAP3G,CAAHwH,odCLV,IAqCeC,GA7BUzH,kBARI,SAAAL,GAAsC,IAAnC2H,EAAmC3H,EAAnC2H,QAAS1G,EAA0BjB,EAA1BiB,SAAUX,EAAgBN,EAAhBM,UACjD,OACEC,EAAAC,EAAAC,cAAA,UAAQiE,KAAK,SAASiD,QAASA,EAASrH,UAAWA,GAChDW,IAKkBZ,CAAH0H,KAYA,SAAA9H,GAAA,OAAAA,EAAG9B,MAAkBC,QAAQC,QAAQC,MAChD,SAAA4B,GAAA,OAAAA,EAAG/B,MAAkBC,QAAQS,WAAWL,OCCpCwJ,GApBA,SAAAhI,GAA0B,IAAvBwF,EAAuBxF,EAAvBwF,MAAOlF,EAAgBN,EAAhBM,UACvB,OACEC,EAAAC,EAAAC,cAACwH,GAAD,CAAiB3H,UAAWA,GAC1BC,EAAAC,EAAAC,cAACyH,GAAD,CAAkBP,QAASnC,EAAM,SAAjC,QACAjF,EAAAC,EAAAC,cAACyH,GAAD,CAAkBP,QAASnC,EAAM,gBAAjC,eAGAjF,EAAAC,EAAAC,cAACyH,GAAD,CAAkBP,QAASnC,EAAM,SAAjC,QACAjF,EAAAC,EAAAC,cAACyH,GAAD,CAAkBP,QAASnC,EAAM,iBAAjC,yQCHN,IA+Fe2C,GAVE9H,kBArFG,SAAAL,GAOd,IANJ0C,EAMI1C,EANJ0C,GACAmB,EAKI7D,EALJ6D,UACAD,EAII5D,EAJJ4D,MACAvE,EAGIW,EAHJX,SACA4E,EAEIjE,EAFJiE,SACA3D,EACIN,EADJM,UACI8H,EACqB5B,IAAjBhB,EADJ4C,EACI5C,MAAOC,EADX2C,EACW3C,MADX4C,EAEwCC,oBAAS,GAFjDC,EAAAzG,OAAA0G,EAAA,EAAA1G,CAAAuG,EAAA,GAEGI,EAFHF,EAAA,GAEmBG,EAFnBH,EAAA,GAKJtC,oBAAU,WACRyC,GAAkB,IACjB,CAAC7E,IAKJ,IA2BMyD,EAZc,WAElB,IAAMqB,EAAc,IAAI7F,KAClB8F,EAAY,IAAI9F,KAAKe,GAIrByD,EAAWjI,GAHGsJ,EAAcC,GAGQ,IAE1C,OAAOC,KAAKC,IAAI,EAAGD,KAAKE,MAAMzB,IAGf0B,GAOjB,OAJI1B,GAAY,IAAMmB,IA7BN,IAAIQ,MAAMC,MAOlBC,OACNT,GAAkB,IAyBN,YAAV9E,GAAuB0D,EAAW,EAElC/G,EAAAC,EAAAC,cAAC2I,EAAD,CAAStF,KAAMG,EAAUqD,SAAUA,EAAUhH,UAAWA,IAO9C,YAAVsD,GAAwB0D,GAAY,GAAe,YAAV1D,EACpCrD,EAAAC,EAAAC,cAAC4I,EAAD,CAAS5D,MAAOA,EAAM/C,GAAKpC,UAAWA,IAMjC,WAAVsD,EACKrD,EAAAC,EAAAC,cAAC6I,GAAD,CAAQ9D,MAAO,SAAA1B,GAAI,OAAI0B,EAAM9C,EAAIoB,IAAOxD,UAAWA,IAGrDC,EAAAC,EAAAC,cAAA,2BAYQJ,CAAHkJ,KAKQ,SAAAtJ,GAAA,OAAAA,EAAG9B,MAAkBC,QAAQC,QAAQG,OC9B5CgL,GA9DG,WAAM,IAAAnB,EAEMC,mBAAS,IAFfC,EAAAzG,OAAA0G,EAAA,EAAA1G,CAAAuG,EAAA,GAEfnG,EAFeqG,EAAA,GAEPkB,EAFOlB,EAAA,GAGhBmB,EAAaxH,EAAOW,OAGpB8G,EAAuB3D,iBAAOlE,OAAA8H,EAAA,EAAA9H,CAAA,GXJZ,aWKR,SAAAyC,GACZkF,EAAUlF,EAAKrC,WAInB2D,EAAgB8D,EAAqBxD,SAZf,IAAA0D,EAeFvB,mBAAS,IAAIxF,MAAxBgH,EAfahI,OAAA0G,EAAA,EAAA1G,CAAA+H,EAAA,MAsBd9C,EAAkBP,IAAlBO,cAoBR,OAfAd,oBAAU,WACR,IAAM8D,EAAUC,YAAY,WAT5BF,EAAQ,IAAIhH,OAS8B,KAQ1C,OALI4G,EAAa,IACftE,QAAQC,IAAR,0BACA0B,KAGK,WACLkD,cAAcF,KAEf,CAACL,EAAY3C,IAGM,IAAlB7E,EAAOW,OACFtC,EAAAC,EAAAC,cAAA,sBAIPF,EAAAC,EAAAC,cAACyJ,EAAD,KACGhI,EAAOO,IAAI,SAAAM,GAAK,OACfxC,EAAAC,EAAAC,cAAC0J,GAAD,CACE9H,IAAKU,EAAML,GACXA,GAAIK,EAAML,GACVmB,UAAWd,EAAMc,UACjBxE,SAAU0D,EAAM1D,SAChB4E,SAAUlB,EAAMkB,SAChBL,MAAOb,EAAMa,YC3CRwG,GAdC,WAEd,IAAM3D,EAAST,mBAKf,OAHAnB,EAAWC,OACX2B,EAAON,QAAUtB,EAGftE,EAAAC,EAAAC,cAAC4J,EAAkBC,SAAnB,CAA4BhI,MAAO,CAAEmE,OAAQA,EAAON,UAClD5F,EAAAC,EAAAC,cAAC8J,GAAD,0eCNN,IAuCehD,GAxBAlH,kBAfI,SAAAL,GAAwD,IAArD2H,EAAqD3H,EAArD2H,QAAS1G,EAA4CjB,EAA5CiB,SAAUX,EAAkCN,EAAlCM,UAAuBkK,GAAWxK,EAAvBmB,QAAuBW,OAAA2I,GAAA,EAAA3I,CAAA9B,EAAA,+CACzE,OACEO,EAAAC,EAAAC,cAAA,SAAAqB,OAAA4I,OAAA,CAAQhG,KAAK,SAASiD,QAASA,EAASrH,UAAWA,GAAekK,GAC/DvJ,IAYQZ,CAAHsK,KAMC,SAAA1K,GAAA,MAA8B,WAA9BA,EAAGkB,QAAsC,eAAiB,SACjD,SAAAjB,GAAA,OAAAA,EAAG/B,MAAkBC,QAAQC,QAAQC,MAChD,SAAA8C,GAAA,OAAAA,EAAGjD,MAAkBC,QAAQS,WAAWL,MAGlC,SAAA6C,GAAA,MAA8B,WAA9BA,EAAGF,QAAsC,SAAW,QACnD,SAAAG,GAAA,MAA8B,WAA9BA,EAAGH,QAAsC,SAAW,QAO9C,SAAAI,GAAA,OAAAA,EAAGpD,MAAkBC,QAAQQ,SAASN,0gBCvC9D,IAAMsM,GAAcvK,UAAOwK,EAAVC,KAIN,SAAA9K,GAAA,OAAAA,EAAG7B,MAAkBC,QAAQS,WAAWL,OAkCpCuM,GALC1K,kBAbI,SAAAJ,GAA6B,IAA1BK,EAA0BL,EAA1BK,UAAWW,EAAehB,EAAfgB,SAChC,OACEV,EAAAC,EAAAC,cAAA,OAAKH,UAAWA,GACdC,EAAAC,EAAAC,cAACmK,GAAD,KAAc3J,KAUJZ,CAAH2K,4QCpCb,IAYeC,GAZD5K,UAAO6K,MAAVC,KAOM,SAAAnL,GAAA,MAA8B,WAA9BA,EAAGmB,QAAsC,SAAW,QACnD,SAAAlB,GAAA,MAA8B,WAA9BA,EAAGkB,QAAsC,SAAW,QACzD,SAAAjB,GAAA,MAA8B,WAA9BA,EAAGiB,QAAsC,eAAiB,iFCUvE,IAkJeiK,GAFI/K,kBAtII,SAAAL,GAAmB,IAAhBM,EAAgBN,EAAhBM,UAAgB+K,EAMpC3E,qBAAWf,GAJbhD,EAFsC0I,EAEtC1I,SACA2I,EAHsCD,EAGtCC,YACAC,EAJsCF,EAItCE,eACAC,EALsCH,EAKtCG,kBAgBIC,EAAkB,WACtB,MACsB,kBAAb9I,GACPA,EAASE,QAAU,GACnBF,EAASE,QAAU,IAzBiBwF,EAgCRC,mBAAS,IAhCDC,EAAAzG,OAAA0G,EAAA,EAAA1G,CAAAuG,EAAA,GAgCjCxB,EAhCiC0B,EAAA,GAgCvBmD,EAhCuBnD,EAAA,GA8ClCoD,EAAkB/E,sBACtB,SAAAgF,GAEE,OA3DiB,KA0DOA,GAAiB/E,GAClBhE,QAEzB,CAACgE,IAIKC,EAAeN,IAAfM,WAYF6C,EAAuB3D,iBAAOlE,OAAA8H,EAAA,EAAA9H,CAAA,GhBzFV,egB0FR,SAAA+J,GACdL,EAAkBK,MAItBhG,EAAgB8D,EAAqBxD,SAzEG,IAAA0D,EA4EZvB,mBAAS,QA5EGwD,EAAAhK,OAAA0G,EAAA,EAAA1G,CAAA+H,EAAA,GA4EjCkC,EA5EiCD,EAAA,GA4EzBE,EA5EyBF,EAAA,GAmFxC,OANA7F,oBAAU,WACJsF,GAAkBI,EAAgBJ,IACpCS,EAAU,gBAEX,CAACT,EAAgBI,IAEL,gBAAXI,EACKxL,EAAAC,EAAAC,cAACwL,EAAA,EAAD,CAAUtL,GAAE,GAAAzB,OxBjHH,UwBiHG,KAAAA,OAAoBqM,KAKvChL,EAAAC,EAAAC,cAAA,OAAKH,UAAWA,GACdC,EAAAC,EAAAC,cAACyL,GAAD,CACExH,KAAK,OACLyH,SAhFuB,SAAAC,GAC3B,IAAMC,EAAUD,EAAME,OAAOhK,MAC7BgJ,EAAYe,IA+ER/J,MAAOK,EACP4J,YAAY,gBACZC,aAAW,WACXC,gBAAc,OACdC,MAAO,CAAEC,aAAc,UAGxBlB,KACClL,EAAAC,EAAAC,cAACF,EAAAC,EAAMiB,SAAP,KACElB,EAAAC,EAAAC,cAACmM,GAAD,CACEzL,QAAQ,OACRvC,UAAW6M,IACX9D,QA7Ce,WACnB8D,KACF3E,EAAWnE,KAwCP,eAQApC,EAAAC,EAAAC,cAACoM,GAAD,WAEAtM,EAAAC,EAAAC,cAACyL,GAAD,CACExH,KAAK,OACLyH,SAjFmB,SAAAC,GAC3B,IAAIU,EAAcV,EAAME,OAAOhK,MAG3BwK,EAAYjK,QA/CG,IAgDjBiK,EAAcA,EAAYC,cAC1BrB,EAAYoB,KA4ENxK,MAAOuE,EACP0F,YAAY,YACZC,aAAW,cAEbjM,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAE,WAAAzB,OAAa2H,IACnBtG,EAAAC,EAAAC,cAACmM,GAAD,CAAQzL,QAAQ,OAAOvC,UAAW+M,KAAlC,iBAcOtL,CAAH2M,sGC/JhB,ICKY3K,GDWG4K,GAJS5M,kBAZI,SAAAL,GAAmB,IAAhBM,EAAgBN,EAAhBM,UAGrBiL,EADW7E,qBAAWf,GACtB4F,eAER,OAAOhL,EAAAC,EAAAC,cAAA,KAAGH,UAAWA,GAAd,QAA+BiL,IAOhBlL,CAAH6M,0BE8DNC,GAlEI,SAAAhN,GAAS,IAAAiN,EAAA/E,EACEC,mBAAS,QADXC,EAAAzG,OAAA0G,EAAA,EAAA1G,CAAAuG,EAAA,GACnB0D,EADmBxD,EAAA,GACXyD,EADWzD,EAAA,GAAA8C,EAEc3E,qBAAWf,GAA3ChD,EAFkB0I,EAElB1I,SAAU6I,EAFQH,EAERG,kBACZ6B,EAAgB1K,GAAYA,EAASE,OAAS,EAE9C8G,EAAuB3D,kBAAMoH,EAAA,GAAAtL,OAAA8H,EAAA,EAAA9H,CAAAsL,EnBXL,mBmBaR,WAClBpB,EAAU,sBAHqBlK,OAAA8H,EAAA,EAAA9H,CAAAsL,EnBdV,cmBoBR,SAAA7I,GACbiH,EAAkBjH,EAAKsC,YAPQ/E,OAAA8H,EAAA,EAAA9H,CAAAsL,EnBZV,cmBsBR,WACbpB,EAAU,WAXqBoB,IAenCvH,EAAgB8D,EAAqBxD,SApBX,IAyBZU,EAEV1G,EAHFmN,MACEC,OAAU1G,SAKNF,EAAaH,IAAbG,SAYR,OAXAV,oBAAU,WD3CA,IAAAuH,EC4CJH,GD5CIG,EC8Ca,CAAE7K,YD7CZb,OAAOU,KAAKgL,GACpBC,QAAQ,SAAApL,GACX,IAAMC,EAAQkL,EAAInL,GAClB+C,QAAQC,IAAR,6BAAAnG,OAAyCmD,EAAzC,MAAAnD,OAAiDoD,EAAjD,OACAoL,KAAGrL,EAAKC,KC0CNqE,EAASE,EAAUlE,IAGnBqJ,EAAU,gBAEX,CAACrF,EAAUE,EAAUlE,EAAU0K,IAEnB,SAAXtB,EACKxL,EAAAC,EAAAC,cAAA,4BAGM,qBAAXsL,GAA4C,gBAAXA,EAC5BxL,EAAAC,EAAAC,cAACwL,EAAA,EAAD,CAAUtL,G3B3DD,Y2B8DH,UAAXoL,EAEAxL,EAAAC,EAAAC,cAAAF,EAAAC,EAAAiB,SAAA,KACElB,EAAAC,EAAAC,cAACkN,GAAD,MACApN,EAAAC,EAAAC,cAAC8J,GAAD,OAKChK,EAAAC,EAAAC,cAAA,2DCpEHmN,GAAe,WASnB,OAFeC,KAFT,uDCKJC,IHJQzL,GGI8B,WHJvBqL,KAAGrL,KGImC,IAUzD,IA0Ce0L,GA1CA,WAAM,IAAA1F,EACyBC,mBAAS,MADlCC,EAAAzG,OAAA0G,EAAA,EAAA1G,CAAAuG,EAAA,GACZkD,EADYhD,EAAA,GACIiD,EADJjD,EAAA,GAAAsB,EAEavB,mBAASwF,IAFtBhC,EAAAhK,OAAA0G,EAAA,EAAA1G,CAAA+H,EAAA,GAEZlH,EAFYmJ,EAAA,GAEFR,EAFEQ,EAAA,GAKbrF,EAAST,mBAWf,QAPuBgI,IAAnBvH,EAAON,UACTf,QAAQC,IAAI,4BACZoB,EAAON,QAAUyH,KDnBE,SAAAnH,GAErBA,EAAOvB,GpBdkB,coBcM,SAAAX,GAAQ,IAC7B5B,EAAkC4B,EAAlC5B,SAAUiC,EAAwBL,EAAxBK,UAAWiC,EAAatC,EAAbsC,SAC7BxC,EpBhBuB,coBgBM,CAC3BK,KpBjBqB,coBkBrBhC,GAAIiC,MACJhC,WACAiC,YACAiC,eAKJJ,EAAOvB,GpBxBkB,coBwBM,SAAAX,GAAQ,IAC7BK,EAAuBL,EAAvBK,UAAW3C,EAAYsC,EAAZtC,QACnBoC,EpB1BuB,coB0BM,CAC3BK,KpB3BqB,coB4BrBhC,GAAIiC,MACJC,YACA3C,cAKJwE,EAAOvB,GpBpCgB,YoBoCM,SAAAX,GAAQ,IAC3B5B,EAAwB4B,EAAxB5B,SAAUiC,EAAcL,EAAdK,UAClBP,EpBtCqB,YoBsCM,CACzBK,KpBvCmB,YoBwCnBhC,GAAIiC,MACJhC,WACAiC,gBAKJ6B,EAAOvB,GpB5CmB,eoB4CM,SAAAX,GAAQ,IAC9BsC,EAAatC,EAAbsC,SACRxC,EpB9CwB,eoB8CMwC,KAKhCJ,EAAOvB,GpBpDuB,mBoBoDM,SAAAX,GAAQ,IAClCsC,EAAwBtC,EAAxBsC,SAAUjC,EAAcL,EAAdK,UAClBP,EpBtD4B,mBoBsDM,CAChCK,KpBvD0B,mBoBwD1BhC,GAAIiC,MACJkC,WACAjC,gBAKJ6B,EAAOvB,GpB5DiB,aoB4DM,SAAAX,GAAQ,IAC5BrC,EAAoBqC,EAApBrC,OAAQwD,EAAYnB,EAAZmB,QAChBrB,EpB9DsB,aoB8DM,CAC1BK,KpB/DoB,aoBgEpBhC,GAAIiC,MACJC,WAAW,IAAI9B,MAAOkB,WACtB9B,SACAwD,cAKJe,EAAOvB,GpBvEsB,kBoBuEM,SAAAX,GAAQ,IACjCmB,EAAYnB,EAAZmB,QAERrB,EpB1E2B,kBoB0EM,CAC/BK,KpB3EyB,kBoB4EzBhC,GAAIiC,MACJC,WAAW,IAAI9B,MAAOkB,WACtB0B,cCnDFuI,CAAexH,EAAON,WAEnBM,EAAON,QAEV,OADAf,QAAQC,IAAI,sCACL,KAGT,IAAM6I,EAAa,CACjBzH,OAAQA,EAAON,QACfxD,WACA2I,YAAa,SAAA6C,GAAW,OAAI7C,EAAY6C,IACxC5C,iBACAC,kBAAmB,SAAA3E,GAAQ,OAAI2E,EAAkB3E,KAGnD,OACEtG,EAAAC,EAAAC,cAAC4J,EAAkBC,SAAnB,CAA4BhI,MAAO4L,GACjC3N,EAAAC,EAAAC,cAACwL,EAAA,EAAD,KACE1L,EAAAC,EAAAC,cAACwL,EAAA,EAAD,CACEmC,KAAI,GAAAlP,O7BxDM,U6BwDN,cACJmP,UAAWlB,KAEb5M,EAAAC,EAAAC,cAACwL,EAAA,EAAD,CAAOmC,KAAK,IAAIC,UAAWjD,+gBCtDnC,IAAMkD,GAAgBjO,UAAOkO,KAAVC,MA0BbC,GAAUC,oBAAHC,MAuBEC,GAVCvO,kBA/BI,SAAAL,GAAwC,IAArCM,EAAqCN,EAArCM,UAAWsE,EAA0B5E,EAA1B4E,UAAW3D,EAAejB,EAAfiB,SACrC4N,EAAO,IAAI/L,KAAK8B,GAEtB,OACErE,EAAAC,EAAAC,cAAA,KAAGH,UAAWA,GACZC,EAAAC,EAAAC,cAAC6N,GAAD,QAAApP,OAAmB2P,EAAKC,WAAxB,KAAA5P,OAAsC2P,EAAKE,eAC3CxO,EAAAC,EAAAC,cAAA,YAAOQ,KAyBGZ,CAAH2O,KAKF,SAAA/O,GAAA,OAAAA,EAAG9B,MAAkBC,QAAQS,WAAWL,MAEpCiQ,IChDTQ,GAAmB,CAEzBA,YAAwC,SAAA1K,GAAQ,IACtC5B,EAAuB4B,EAAvB5B,SAAUkE,EAAatC,EAAbsC,SAClB,SAAA3H,OAAUyD,EAAV,iBAAAzD,OAAkC2H,IAGpCoI,YAAwC,SAAAjP,GAAiB,IACjDkP,EADiDlP,EAAdiC,QACZjD,KAAK,MAClC,0BAAAE,OAA2BgQ,IAG7BD,UAAsC,SAAAhP,GAAkB,IAAf0C,EAAe1C,EAAf0C,SACvC,SAAAzD,OAAUyD,EAAV,UAGFsM,iBAA6C,SAAA/O,GAAkB,IAAf2G,EAAe3G,EAAf2G,SAC9C,cAAA3H,OAAe2H,EAAf,mBAGFoI,WAAuC,SAAA7N,GACrC,OADsDA,EAAdsE,SAI1CuJ,gBAA4C,SAAA5N,GAC1C,OAD2DA,EAAdqE,UAIhCuJ,MCnBAL,GAPb,SAAAA,EAAA5O,GAAwC,IAA1B0C,EAA0B1C,EAA1B0C,GAAIkC,EAAsB5E,EAAtB4E,UAAWuK,EAAWnP,EAAXmP,QAAWrN,OAAAC,EAAA,EAAAD,CAAAE,KAAA4M,GACtC5M,KAAKU,GAAKA,EACVV,KAAK4C,UAAYA,EACjB5C,KAAKmN,QAAUA,2RCQnB,IA2EeC,GAfQ/O,kBA1DI,SAAAL,GAAmB,IAAAoN,EAAhB9M,EAAgBN,EAAhBM,UAAgB+H,EAEZC,mBAAS,IAFGC,EAAAzG,OAAA0G,EAAA,EAAA1G,CAAAuG,EAAA,GAErCgH,EAFqC9G,EAAA,GAE3B+G,EAF2B/G,EAAA,GAKtCgH,EAAgB,SAAAhL,GAAQ,IACpB7B,EAAsC6B,EAAtC7B,GAAIgC,EAAkCH,EAAlCG,KAAME,EAA4BL,EAA5BK,UAAc4K,EADJ1N,OAAA2I,GAAA,EAAA3I,CACkByC,EADlB,2BAItB4K,EAAUF,GAAiBvK,GAAM8K,GACjCC,EAAa,IAAIb,GAAQ,CAAElM,KAAIkC,YAAWuK,YAEhDG,EAAY,SAAAI,GAEV,MADiB,GAAAxQ,OAAA4C,OAAA6N,GAAA,EAAA7N,CAAO4N,GAAP,CAAqBD,OAMpC9F,EAAuB3D,kBAAMoH,EAAA,GAAAtL,OAAA8H,EAAA,EAAA9H,CAAAsL,EzBlCV,cyBmCR,SAAA7I,GACbgL,EAAchL,KAFiBzC,OAAA8H,EAAA,EAAA9H,CAAAsL,EzBjCZ,YyBqCR,SAAA7I,GACXgL,EAAchL,KALiBzC,OAAA8H,EAAA,EAAA9H,CAAAsL,EzBhCV,cyBuCR,SAAA7I,GACbgL,EAAchL,KARiBzC,OAAA8H,EAAA,EAAA9H,CAAAsL,EzB/BL,mByByCR,SAAA7I,GAClBgL,EAAchL,KAXiBzC,OAAA8H,EAAA,EAAA9H,CAAAsL,EzB5BX,ayByCR,SAAA7I,GACRA,EAAKmB,SAAS6J,EAAchL,KAdDzC,OAAA8H,EAAA,EAAA9H,CAAAsL,EzB3BN,kByB2CR,SAAA7I,GACjBgL,EAAchL,KAjBiB6I,IAuBnC,OAFAvH,EAAgB8D,EAAqBxD,SAGnC5F,EAAAC,EAAAC,cAAA,OAAKH,UAAWA,GAEd+O,EAASO,OAAMC,GAAmBpN,IAAI,SAAAqN,GAAG,OACvCvP,EAAAC,EAAAC,cAACsP,GAAD,CAAe1N,IAAG,GAAAnD,OAAK4Q,EAAIpN,IAAMkC,UAAWkL,EAAIlL,WAC7CkL,EAAIX,aAWQ9O,CAAH2P,MChDLC,GAfF,WACX,OACE1P,EAAAC,EAAAC,cAAAF,EAAAC,EAAAiB,SAAA,KACElB,EAAAC,EAAAC,cAACyP,EAAD,MACA3P,EAAAC,EAAAC,cAACwL,EAAA,EAAD,KACE1L,EAAAC,EAAAC,cAACwL,EAAA,EAAD,CAAOkE,OAAK,EAAC/B,KlCnBL,WkCmB2BC,UAAWjE,KAC9C7J,EAAAC,EAAAC,cAACwL,EAAA,EAAD,CAAOmC,KlCnBK,UkCmBqBC,UAAWN,KAC5CxN,EAAAC,EAAAC,cAACwL,EAAA,EAAD,CAAOmC,KlCtBF,IkCsBqBC,UAAW7M,KAEvCjB,EAAAC,EAAAC,cAAC2P,GAAD,MACA7P,EAAAC,EAAAC,cAAC4P,EAAD,QCdNC,IAAQC,KAAK,CACXC,OAAQ,CACNC,SAAU,CAAC,yBAA0B,YAIzC,IACMC,GAAe,gCAmBNC,OAjBf,WACE,OACEpQ,EAAAC,EAAAC,cAACmQ,EAAA,cAAD,CAAezS,MAAOA,GACpBoC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAiB,SAAA,KACElB,EAAAC,EAAAC,cAACoQ,EAAD,MACAtQ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEoQ,SACyDJ,IAGzDnQ,EAAAC,EAAAC,cAACsQ,GAAD,UClBJC,GAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS9D,MACvB,2DAsCN,SAAS+D,GAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBlO,QACf4N,UAAUC,cAAcQ,YAI1B7M,QAAQC,IACN,iHAKEkM,GAAUA,EAAOW,UACnBX,EAAOW,SAASN,KAMlBxM,QAAQC,IAAI,sCAGRkM,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUP,UAO5BQ,MAAM,SAAAzT,GACLyG,QAAQzG,MAAM,4CAA6CA,KC1FjE0T,IAASC,OAAO/R,EAAAC,EAAAC,cAAC8R,GAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,gCAAwBzB,OAAOC,SAASyB,MACpDC,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,OAAQ,WAC9B,IAAMxB,EAAK,GAAApS,OAAMyT,gCAAN,sBAEP3B,IAgEV,SAAiCM,EAAOC,GAEtCwB,MAAMzB,GACHK,KAAK,SAAAqB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASjH,QACO,MAAfkH,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAM1B,KAAK,SAAAC,GACjCA,EAAa0B,aAAa3B,KAAK,WAC7BT,OAAOC,SAASoC,aAKpBlC,GAAgBC,EAAOC,KAG1Ba,MAAM,WACLhN,QAAQC,IACN,mEArFAmO,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAM1B,KAAK,WACjCvM,QAAQC,IACN,gHAMJgM,GAAgBC,EAAOC,MCvC/BE,uBCXAgC,EAAAC,QAAiBC,EAAA9I,EAAuB","file":"static/js/main.7697f8c0.chunk.js","sourcesContent":["const baseFonts = ['Roboto', 'Arial', 'sans-serif'];\n\nexport default {\n  palette: {\n    primary: {\n      main: '#efd71f',\n      light: '#fff8bf',\n      dark: '#59563d',\n    },\n    secondary: {\n      main: '#FFE2BC',\n      light: '#FFF9F0',\n      dark: '#C79349',\n    },\n    success: {\n      main: '#319F4A',\n      light: '#55D370',\n      dark: '#257134',\n    },\n    error: {\n      main: '#D34E41',\n      light: '#FF7365',\n      dark: '#953930',\n    },\n    disabled: {\n      main: '#7A7A7A',\n    },\n    typography: {\n      light: '#FFFFFF',\n      dark: '#020202',\n    },\n  },\n  typography: {\n    base: {\n      fontFamily: baseFonts.join(','),\n    },\n    title: {\n      fontFamily: ['Montserrat', ...baseFonts].join(','),\n    },\n  },\n  emoji: '🥥',\n  transition: {\n    duration: '0.2s',\n    timingFunction: 'ease-out',\n  },\n  appDrawer: {\n    width: {\n      mobile: {\n        open: '90vw',\n        closed: '0',\n      },\n      desktop: {\n        open: '240px',\n        closed: '0',\n      },\n    },\n  },\n};\n","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyles = createGlobalStyle`\n  body {\n    font-family: ${({ theme }) => theme.typography.base.fontFamily};\n    color: ${({ theme }) => theme.palette.typography.light};\n    background-color: #1A1A1A;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    font-family: ${({ theme }) => theme.typography.title.fontFamily};\n    font-weight: 600;\n\n    svg {\n      vertical-align: middle;\n      margin-right: 0.3em;\n      margin-top: -0.5%;\n    }\n  }\n\n  h1, h2 {\n    font-weight: 700;\n  }\n\n  h3 {\n    color: ${props => props.theme.palette.primary.dark}\n  }\n`;\n\nexport default GlobalStyles;\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nimport { ROOT } from '../types/routes';\r\n\r\nconst HeaderContent = ({ className }) => {\r\n  return (\r\n    <div className={className}>\r\n      <Link to={ROOT}>\r\n        <h1>Cooking Timer</h1>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nHeaderContent.propTypes = {\r\n  className: PropTypes.string,\r\n};\r\n\r\nconst Header = styled(HeaderContent)`\r\n  height: 50px;\r\n  background-color: ${({ theme }) => theme.palette.primary.main};\r\n  color: black;\r\n\r\n  h1 {\r\n    margin: 0;\r\n    padding: 0.5rem 0.25rem;\r\n    text-align: center;\r\n  }\r\n`;\r\n\r\nexport default Header;\r\n","const ROOT = '/';\r\nconst OFFLINE = '/offline';\r\nconst ONLINE_ROOT = '/online';\r\n// const ROOM_SELECT = `${ONLINE_ROOT}/room-select`;\r\n\r\nexport { ROOT, OFFLINE, ONLINE_ROOT };\r\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst AppControlsContent = ({ className }) => {\n  return (\n    <div className={className}>\n      <div>App Controls here</div>\n    </div>\n  );\n};\n\nAppControlsContent.propTypes = {\n  className: PropTypes.string,\n};\n\nconst AppControls = styled(AppControlsContent)`\n  height: 30px;\n  background-color: #efd71f;\n  color: black;\n\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  text-align: center;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport default AppControls;\n","// eslint-disable ts-styled-plugin\r\n\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst LinkButtonBase = ({ to, className, children }) => {\r\n  return (\r\n    <Link to={to} className={className}>\r\n      {children}\r\n    </Link>\r\n  );\r\n};\r\n\r\nLinkButtonBase.propTypes = {\r\n  to: PropTypes.string,\r\n  className: PropTypes.string,\r\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\r\n};\r\n\r\nconst LinkButton = styled(LinkButtonBase)`\r\n  display: ${({ variant }) => (variant === 'inline' ? 'inline-block' : 'block')}\r\n  background-color: ${({ theme }) => theme.palette.primary.main};\r\n  color: ${({ theme }) => theme.palette.typography.dark};\r\n  margin-top: 0.5rem;\r\n  margin-bottom: 0.5rem;\r\n  margin-left: ${({ variant }) => (variant === 'inline' ? '0.5rem' : 'auto')}\r\n  margin-right: ${({ variant }) => (variant === 'inline' ? '0.5rem' : 'auto')}\r\n  padding: 0.5rem 1rem;\r\n  text-decoration: none;\r\n\r\n  border-radius: 3rem;\r\n  text-transform: uppercase;\r\n\r\n  &:disabled {\r\n    background-color: ${({ theme }) => theme.palette.disabled.main};\r\n    pointer-events: none;\r\n  }\r\n`;\r\n\r\nexport default LinkButton;\r\n","import uuid from 'uuid/v4';\r\nimport Room from 'sea-of-thieves-cooking-timer-server/lib/types/Room'; // eslint-disable-line import/no-extraneous-dependencies\r\nimport Timer from 'sea-of-thieves-cooking-timer-server/lib/types/Timer'; // eslint-disable-line import/no-extraneous-dependencies\r\n\r\nimport { publish } from '../components/MessageCenter';\r\nimport * as actions from '../components/actions/actions';\r\n\r\n// Keep track of timers here.\r\nlet room;\r\n\r\nconst addTimers = amount => {\r\n  for (let i = 0; i < amount; i += 1) {\r\n    room.addTimer(new Timer(uuid()));\r\n  }\r\n};\r\n\r\nconst publishTimerSync = () => {\r\n  publish(actions.TIMER_SYNC, {\r\n    type: actions.TIMER_SYNC,\r\n    id: uuid(),\r\n    timestamp: new Date().toString(),\r\n    timers: room.timers,\r\n  });\r\n};\r\n\r\nconst fakeSocket = {\r\n  init: () => {\r\n    // console.log('fakeSocket init');\r\n\r\n    // Create a new room\r\n    const roomCode = 'LOCL';\r\n    room = new Room(roomCode);\r\n    // Populate it with timers.\r\n    addTimers(4);\r\n\r\n    publish(actions.ROOM_CREATED, roomCode);\r\n  },\r\n\r\n  // Actions emitted BY the fake socket.\r\n  on: (action, data) => console.log('fakeSocket on:', action, data),\r\n\r\n  // Actions that were emitted TO the fake socket.\r\n  emit: (action, data) => {\r\n    // console.log('fakeSocket emit:', action, data);\r\n\r\n    switch (action) {\r\n      case actions.REQUEST_TIMERS: {\r\n        publishTimerSync();\r\n        break;\r\n      }\r\n\r\n      case actions.START: {\r\n        const { id, food } = data;\r\n\r\n        // Start the timer\r\n        room.getTimer(id).start(food);\r\n\r\n        // Send a timer sync event\r\n        publishTimerSync();\r\n        break;\r\n      }\r\n\r\n      case actions.RESET: {\r\n        const { id } = data;\r\n        room.getTimer(id).reset();\r\n\r\n        publishTimerSync();\r\n        break;\r\n      }\r\n\r\n      default: {\r\n        publish(actions.GENERIC_MESSAGE, {\r\n          type: actions.GENERIC_MESSAGE,\r\n          id: uuid(),\r\n          timestamp: new Date().toString(),\r\n          message: `fakeSocket has no handler for your action. ${action}`,\r\n        });\r\n      }\r\n    }\r\n  },\r\n};\r\n\r\nexport default fakeSocket;\r\n","import React from 'react';\r\n\r\nimport { ONLINE_ROOT, OFFLINE } from '../types/routes';\r\nimport LinkButton from './Generic/LinkButton';\r\n\r\n/**\r\n * Welcome page for new users.\r\n * Displays option to use the timers offline or online.\r\n */\r\nconst Welcome = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <LinkButton to={OFFLINE} variant=\"inline\">\r\n        Offline\r\n      </LinkButton>\r\n      <LinkButton to={ONLINE_ROOT} variant=\"inline\">\r\n        Online\r\n      </LinkButton>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Welcome;\r\n","import _classCallCheck from \"/Users/misajokisalo/Projects/sea-of-thieves-cooking-timer/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/misajokisalo/Projects/sea-of-thieves-cooking-timer/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar Room =\n/*#__PURE__*/\nfunction () {\n  function Room(code) {\n    _classCallCheck(this, Room);\n\n    this.code = code;\n    this.members = {}; // id: { nickname: ___ }\n\n    this.timers = [];\n    this.abandonedSince = null;\n  }\n\n  _createClass(Room, [{\n    key: \"getMemberNames\",\n    value: function getMemberNames() {\n      var _this = this;\n\n      return Object.keys(this.members).map(function (id) {\n        return _this.members[id].nickname;\n      });\n    }\n  }, {\n    key: \"getMemberById\",\n    value: function getMemberById(id) {\n      return this.members[id];\n    }\n  }, {\n    key: \"addMember\",\n    value: function addMember(user) {\n      this.members[user.id] = user;\n      this.abandonedSince = null;\n    }\n  }, {\n    key: \"removeMember\",\n    value: function removeMember(id) {\n      delete this.members[id]; // If the last member was removed, set abandonedSince to a date.\n\n      var memberCount = Object.keys(this.members).length;\n\n      if (memberCount < 1) {\n        this.abandonedSince = new Date();\n      }\n    }\n  }, {\n    key: \"addTimer\",\n    value: function addTimer(timer) {\n      this.timers.push(timer);\n    }\n    /**\r\n     * Get a Timer by id.\r\n     */\n\n  }, {\n    key: \"getTimer\",\n    value: function getTimer(id) {\n      var iterations = this.timers.length;\n\n      for (var i = 0; i < iterations; i += 1) {\n        var timer = this.timers[i];\n\n        if (timer.id === id) {\n          return timer;\n        }\n      }\n\n      throw new Error(\"Could not find timer with id \".concat(id));\n    }\n  }]);\n\n  return Room;\n}();\n\nexport default Room;","import _classCallCheck from \"/Users/misajokisalo/Projects/sea-of-thieves-cooking-timer/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/misajokisalo/Projects/sea-of-thieves-cooking-timer/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar DEV = process.env.NODE_ENV !== 'production';\n/**\r\n * Foods that can be cooked and their durations.\r\n */\n\nvar foods = {\n  FISH: {\n    name: 'Fish',\n    duration: 40\n  },\n  TROPHY_FISH: {\n    name: 'Trophy Fish',\n    duration: 90\n  },\n  MEAT: {\n    name: 'Meat',\n    duration: 60\n  },\n  MONSTER_MEAT: {\n    name: 'Monster Meat',\n    duration: 120\n  }\n};\n\nvar Timer =\n/*#__PURE__*/\nfunction () {\n  function Timer(id) {\n    _classCallCheck(this, Timer);\n\n    this.id = id;\n    this.state = 'SELECT';\n    this.startDate;\n    this.duration;\n  }\n  /**\r\n   * Starts a timer with the given food.\r\n   */\n\n\n  _createClass(Timer, [{\n    key: \"start\",\n    value: function start(food) {\n      if (Object.keys(foods).includes(food)) {\n        this.state = 'RUNNING';\n        this.startDate = new Date().toString();\n        this.duration = foods[food].duration;\n        this.foodName = foods[food].name;\n        if (DEV) this.duration *= 0.05;\n        return this;\n      }\n\n      throw new TypeError(\"Cannot start a timer with food \".concat(food));\n    }\n    /**\r\n     * Resets a timer\r\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.state = 'SELECT';\n    }\n  }]);\n\n  return Timer;\n}();\n\nexport default Timer;","import { Subject } from 'rxjs';\r\n\r\n/**\r\n * Used to publish and subscribe to messages.\r\n */\r\nconst MessageCenter = new Subject();\r\n\r\n/**\r\n * Used to publish messages.\r\n * @param {string} topic Which topic is the event related to. Only subscribers to this topic will receive it.\r\n * @param {*}      data  Message content.\r\n */\r\nconst publish = (topic, data) => MessageCenter.next({ topic, data });\r\n\r\nexport { publish };\r\nexport default MessageCenter;\r\n","export const CREATE_ROOM = 'CREATE_ROOM';\r\nexport const JOIN_ROOM = 'JOIN_ROOM';\r\nexport const START = 'START';\r\nexport const RESET = 'RESET';\r\nexport const PAUSE = 'PAUSE';\r\nexport const USER_JOINED = 'USER_JOINED';\r\nexport const USER_LEFT = 'USER_LEFT';\r\nexport const MEMBER_LIST = 'MEMBER_LIST';\r\nexport const NONEXISTANT_ROOM = 'NONEXISTANT_ROOM';\r\nexport const ROOM_CREATED = 'ROOM_CREATED';\r\nexport const REQUEST_TIMERS = 'REQUEST_TIMERS';\r\nexport const TIMER_SYNC = 'TIMER_SYNC';\r\nexport const GENERIC_MESSAGE = 'GENERIC_MESSAGE';\r\n","import { createContext } from 'react';\r\n\r\nconst ConnectionContext = createContext(null);\r\n\r\nexport default ConnectionContext;\r\n","import { useRef, useEffect } from 'react';\r\nimport { filter } from 'rxjs/operators';\r\n\r\nimport MessageCenter from '../MessageCenter';\r\n\r\nconst debug = false;\r\n\r\n/**\r\n * Custom hook.\r\n * Provides components with a subscription thingy.\r\n * @param {object} subs Object where keys are topics and values are their callback functions.\r\n */\r\nconst useSubscription = subs => {\r\n  const subscription = useRef();\r\n\r\n  useEffect(() => {\r\n    const topics = Object.keys(subs);\r\n\r\n    if (debug) console.log('✅ [sub]', topics);\r\n\r\n    subscription.current = MessageCenter.pipe(\r\n      filter(({ topic }) => topics.includes(topic)),\r\n    ).subscribe(({ topic, data }) => {\r\n      // Call the topic's callback with the received data.\r\n      subs[topic](data);\r\n    });\r\n\r\n    return () => {\r\n      if (debug) console.log('❌ [unsub]', topics);\r\n      subscription.current.unsubscribe();\r\n    };\r\n  }, [subs]);\r\n\r\n  return subscription;\r\n};\r\n\r\nexport default useSubscription;\r\n","import { useContext, useCallback } from 'react';\r\n\r\nimport ConnectionContext from '../contexts/ConnectionContext';\r\nimport * as actions from '../actions/actions';\r\n\r\n/**\r\n * Custom hook.\r\n * Provides functionality for other components to communicate with the server.\r\n * This can help with stale state: https://github.com/facebook/react/issues/15041\r\n */\r\nconst useComms = () => {\r\n  // Get the socket from our context\r\n  const { socket } = useContext(ConnectionContext);\r\n  if (!socket) {\r\n    throw new Error('Socket not defined');\r\n  }\r\n\r\n  /**\r\n   * Starts a timer with the given id and food.\r\n   * @param {string} id   Id of timer to start.\r\n   * @param {string} food Food indicating timer duration.\r\n   */\r\n  const start = (id, food) => () => {\r\n    socket.emit(actions.START, { id, food });\r\n  };\r\n\r\n  const reset = id => () => {\r\n    socket.emit(actions.RESET, { id });\r\n  };\r\n\r\n  /**\r\n   * Join a room with the given code code\r\n   * @param {string} roomCode Room to join.\r\n   * @param {string} nickname Client nickname\r\n   */\r\n  const joinRoom = useCallback(\r\n    (roomCode, nickname) => {\r\n      socket.emit(actions.JOIN_ROOM, { roomCode, nickname });\r\n    },\r\n    [socket],\r\n  );\r\n\r\n  /**\r\n   * Creates a new room.\r\n   */\r\n  const createRoom = useCallback(\r\n    nickname => {\r\n      if (socket) {\r\n        socket.emit(actions.CREATE_ROOM, { nickname });\r\n      } else {\r\n        console.log('No socket!', socket);\r\n      }\r\n    },\r\n    [socket],\r\n  );\r\n\r\n  const requestTimers = () => {\r\n    socket.emit(actions.REQUEST_TIMERS);\r\n  };\r\n\r\n  return { start, reset, createRoom, joinRoom, requestTimers };\r\n};\r\n\r\nexport default useComms;\r\n","import styled from 'styled-components';\n\nimport grid from 'easy-grid';\n\nconst GridBase = grid`\n    50%   50%\n50% A     B\n50% C     D\n`;\n\nconst Grid = styled(GridBase)`\n  width: calc(100vw - 1rem);\n  height: calc(100vw - 1rem);\n  margin: 0.5rem;\n`;\n\nexport default Grid;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Running = ({ food, timeLeft, className }) => {\r\n  return (\r\n    <div className={className}>\r\n      <p>{food} is cooking</p>\r\n      <h2>{timeLeft}</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nRunning.propTypes = {\r\n  food: PropTypes.string,\r\n  timeLeft: PropTypes.number,\r\n  className: PropTypes.string,\r\n};\r\n\r\nexport default Running;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n  padding: 1rem;\r\n  background-color: ${({ theme }) => theme.palette.primary.main};\r\n`;\r\n\r\nconst Stopped = ({ reset, className }) => {\r\n  return (\r\n    <div className={className}>\r\n      <p>Timer has stopped</p>\r\n      <Button type=\"button\" onClick={reset}>\r\n        OK\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nStopped.propTypes = {\r\n  reset: PropTypes.func,\r\n  className: PropTypes.string,\r\n};\r\n\r\nexport default Stopped;\r\n","import styled from 'styled-components';\nimport grid from 'easy-grid';\n\nconst GridBase = grid`\n    50% 50%\n50% A   B\n50% C   D\n`;\n\nconst Grid = styled(GridBase)`\n  width: 100%;\n  height: 100%;\n`;\n\nexport default Grid;\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst FoodSelectButtonBase = ({ onClick, children, className }) => {\n  return (\n    <button type=\"button\" onClick={onClick} className={className}>\n      {children}\n    </button>\n  );\n};\n\nconst FoodSelectButton = styled(FoodSelectButtonBase)`\n  position: relative;\n  margin: 0;\n  padding: 0rem;\n  border: none;\n  font: inherit;\n  color: inherit;\n  background-color: transparent;\n  /* show a hand cursor on hover; some argue that we\n  should keep the default arrow cursor for buttons */\n  cursor: pointer;\n\n  background-color: ${({ theme }) => theme.palette.primary.main};\n  color: ${({ theme }) => theme.palette.typography.dark};\n\n  width: calc(100% - 6px);\n  height: calc(100% - 6px);\n  margin: 3px;\n`;\n\nFoodSelectButtonBase.propTypes = {\n  onClick: PropTypes.func,\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]),\n  className: PropTypes.string,\n};\n\nexport default FoodSelectButton;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport TimerButtonGrid from '../../Generic/Grids/TimerButtonGrid';\r\nimport FoodSelectButton from '../FoodSelectButton';\r\n\r\nconst Select = ({ start, className }) => {\r\n  return (\r\n    <TimerButtonGrid className={className}>\r\n      <FoodSelectButton onClick={start('FISH')}>Fish</FoodSelectButton>\r\n      <FoodSelectButton onClick={start('TROPHY_FISH')}>\r\n        Trophy Fish\r\n      </FoodSelectButton>\r\n      <FoodSelectButton onClick={start('MEAT')}>Meat</FoodSelectButton>\r\n      <FoodSelectButton onClick={start('MONSTER_MEAT')}>\r\n        Monster meat\r\n      </FoodSelectButton>\r\n    </TimerButtonGrid>\r\n  );\r\n};\r\n\r\nSelect.propTypes = {\r\n  start: PropTypes.func,\r\n  className: PropTypes.string,\r\n};\r\n\r\nexport default Select;\r\n","import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useComms from '../hooks/useComms';\r\nimport Running from './TimerStates/Running';\r\nimport Stopped from './TimerStates/Stopped';\r\nimport Select from './TimerStates/Select';\r\n\r\nimport audioFile from '../../assets/sound/annoying-vuvuzela-tone.mp3';\r\n\r\nconst OnlineTimer = ({\r\n  id,\r\n  startDate,\r\n  state,\r\n  duration,\r\n  foodName,\r\n  className,\r\n}) => {\r\n  const { start, reset } = useComms();\r\n  const [soundHasPlayed, setSoundHasPlayed] = useState(false);\r\n\r\n  // When a new start date is given, reset sound so that it can be played.\r\n  useEffect(() => {\r\n    setSoundHasPlayed(false);\r\n  }, [startDate]);\r\n\r\n  /**\r\n   * Plays a sound effect.\r\n   */\r\n  const playSound = () => {\r\n    const audio = new Audio(audioFile);\r\n\r\n    // Don't break developers' ears.\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      audio.volume = 0.15;\r\n    }\r\n\r\n    audio.play();\r\n    setSoundHasPlayed(true);\r\n  };\r\n\r\n  /**\r\n   * Get remaining time in seconds.\r\n   */\r\n  const getTimeLeft = () => {\r\n    // Calculate time that has elapsed since starting the counter.\r\n    const currentTime = new Date();\r\n    const startTime = new Date(startDate); // Convert string to date\r\n    const timeElapsed = currentTime - startTime;\r\n\r\n    // Speed times up while in development\r\n    const timeLeft = duration - timeElapsed / 1000;\r\n\r\n    return Math.max(0, Math.round(timeLeft));\r\n  };\r\n\r\n  const timeLeft = getTimeLeft();\r\n\r\n  // Play sound if time has run out\r\n  if (timeLeft <= 0 && !soundHasPlayed) {\r\n    playSound();\r\n  }\r\n\r\n  if (state === 'RUNNING' && timeLeft > 0) {\r\n    return (\r\n      <Running food={foodName} timeLeft={timeLeft} className={className} />\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If timer is stopped (has just finished and needs to be reset)\r\n   */\r\n  if (state === 'STOPPED' || (timeLeft <= 0 && state === 'RUNNING')) {\r\n    return <Stopped reset={reset(id)} className={className} />;\r\n  }\r\n\r\n  /**\r\n   * If timer is idle.\r\n   */\r\n  if (state === 'SELECT') {\r\n    return <Select start={food => start(id, food)} className={className} />;\r\n  }\r\n\r\n  return <p>Unknown state</p>;\r\n};\r\n\r\nOnlineTimer.propTypes = {\r\n  className: PropTypes.string,\r\n  id: PropTypes.string,\r\n  startDate: PropTypes.string,\r\n  state: PropTypes.string,\r\n  duration: PropTypes.number,\r\n  foodName: PropTypes.string,\r\n};\r\n\r\nconst NewTimer = styled(OnlineTimer)`\r\n  height: calc(100% - 0.5rem);\r\n  width: calc(100% - 0.5rem);\r\n  padding: 0.1rem;\r\n  margin: 0.25rem;\r\n  background-color: ${({ theme }) => theme.palette.primary.dark};\r\n\r\n  text-align: center;\r\n`;\r\n\r\nexport default NewTimer;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\n\r\nimport { TIMER_SYNC } from '../actions/actions';\r\nimport useSubscription from '../hooks/useSubscription';\r\nimport useComms from '../hooks/useComms';\r\n\r\nimport FourByFourGrid from '../Generic/Grids/FourByFourGrid';\r\nimport OnlineTimer from './OnlineTimer';\r\n\r\nconst TimerGrid = () => {\r\n  // Store an array of timers we will later render into components.\r\n  const [timers, setTimers] = useState([]);\r\n  const timerCount = timers.length;\r\n\r\n  // Store our subscription settings in a ref. We don't want to change these over the course of the component's lifetime.\r\n  const subscriptionSettings = useRef({\r\n    [TIMER_SYNC]: data => {\r\n      setTimers(data.timers);\r\n    },\r\n  });\r\n  // Subscribe to the events above.\r\n  useSubscription(subscriptionSettings.current);\r\n\r\n  // Give this component an internal date that refreshes each timer.\r\n  const [, setDate] = useState(new Date());\r\n\r\n  // Ticking function to update the stored date.\r\n  const tick = () => {\r\n    setDate(new Date()); // This refreshes the component state and triggers a re-render (?)\r\n  };\r\n\r\n  const { requestTimers } = useComms();\r\n  /**\r\n   * Set up an internal interval to call tick()\r\n   * Runs on mount and clears itself on unmount.\r\n   */\r\n  useEffect(() => {\r\n    const timerID = setInterval(() => tick(), 200); // Tickrate influences the responsiveness of offline UI\r\n\r\n    // If no timers are present, request them.\r\n    if (timerCount < 1) {\r\n      console.log(`[TimerGrid] No timers!`);\r\n      requestTimers();\r\n    }\r\n\r\n    return function cleanup() {\r\n      clearInterval(timerID);\r\n    };\r\n  }, [timerCount, requestTimers]);\r\n\r\n  // If server hasn't sent us timers yet.\r\n  if (timers.length !== 4) {\r\n    return <p>No timers</p>;\r\n  }\r\n\r\n  return (\r\n    <FourByFourGrid>\r\n      {timers.map(timer => (\r\n        <OnlineTimer\r\n          key={timer.id}\r\n          id={timer.id}\r\n          startDate={timer.startDate}\r\n          duration={timer.duration}\r\n          foodName={timer.foodName}\r\n          state={timer.state}\r\n        />\r\n      ))}\r\n    </FourByFourGrid>\r\n  );\r\n};\r\n\r\nexport default TimerGrid;\r\n","import React, { useRef } from 'react';\r\n\r\nimport fakeSocket from '../services/fakeSocket';\r\nimport ConnectionContext from './contexts/ConnectionContext';\r\n\r\nimport TimerGrid from './Timers/TimerGrid';\r\n\r\nconst Offline = () => {\r\n  // Create an empty socket and a mock socket.\r\n  const socket = useRef();\r\n\r\n  fakeSocket.init();\r\n  socket.current = fakeSocket;\r\n\r\n  return (\r\n    <ConnectionContext.Provider value={{ socket: socket.current }}>\r\n      <TimerGrid />\r\n    </ConnectionContext.Provider>\r\n  );\r\n};\r\n\r\nexport default Offline;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * Button component\r\n * Variants:\r\n *   - Main: Displayed as a block to take up entire width.\r\n *   - Inline: Displayed as an inline block.\r\n */\r\nconst ButtonBase = ({ onClick, children, className, variant, ...rest }) => {\r\n  return (\r\n    <button type=\"button\" onClick={onClick} className={className} {...rest}>\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nButtonBase.propTypes = {\r\n  onClick: PropTypes.func,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  variant: PropTypes.string,\r\n};\r\n\r\nconst Button = styled(ButtonBase)`\r\n  /* Reset button styles */\r\n  border: none;\r\n  font: inherit;\r\n  cursor: pointer;\r\n\r\n  display: ${({ variant }) => (variant === 'inline' ? 'inline-block' : 'block')}\r\n  background-color: ${({ theme }) => theme.palette.primary.main};\r\n  color: ${({ theme }) => theme.palette.typography.dark};\r\n  margin-top: 0.5rem;\r\n  margin-bottom: 0.5rem;\r\n  margin-left: ${({ variant }) => (variant === 'inline' ? '0.5rem' : 'auto')}\r\n  margin-right: ${({ variant }) => (variant === 'inline' ? '0.5rem' : 'auto')}\r\n  padding: 0.5rem 1rem;\r\n\r\n  border-radius: 3rem;\r\n  text-transform: uppercase;\r\n\r\n  &:disabled {\r\n    background-color: ${({ theme }) => theme.palette.disabled.main};\r\n    pointer-events: none;\r\n  }\r\n`;\r\n\r\nexport default Button;\r\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\n// Text in the middle of a divider\nconst DividerText = styled.p`\n  display: inline-block;\n  background-color: #7a7a7a;\n  padding: 0.25rem 0.5rem;\n  color: ${({ theme }) => theme.palette.typography.dark};\n  font-size: 0.75rem;\n  font-weight: bold;\n\n  ::before {\n    content: '';\n    height: 1px;\n    width: 100%;\n    background-color: #7a7a7a;\n    position: absolute;\n    left: 0;\n    top: 50%;\n    z-index: -1;\n  }\n`;\n\nconst DividerBase = ({ className, children }) => {\n  return (\n    <div className={className}>\n      <DividerText>{children}</DividerText>\n    </div>\n  );\n};\n\nDividerBase.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node,\n};\n\nconst Divider = styled(DividerBase)`\n  position: relative;\n  text-align: center;\n`;\n\nexport default Divider;\n","import styled from 'styled-components';\n\nconst Input = styled.input`\n  background-color: white;\n  border: none;\n  padding: 1rem;\n  font-size: 1rem;\n  margin-top: 0.5rem;\n  margin-bottom: 0.5rem;\n  margin-left: ${({ variant }) => (variant === 'inline' ? '0.5rem' : 'auto')}\n  margin-right: ${({ variant }) => (variant === 'inline' ? '0.5rem' : 'auto')}\n  display: ${({ variant }) => (variant === 'inline' ? 'inline-block' : 'block')}\n`;\n\nexport default Input;\n","import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useContext,\r\n  useRef,\r\n  useState,\r\n} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport { Redirect, Link } from 'react-router-dom';\r\n\r\nimport { ROOM_CREATED } from './actions/actions';\r\nimport ConnectionContext from './contexts/ConnectionContext';\r\nimport Button from './Generic/Button';\r\nimport Divider from './Generic/Divider';\r\nimport Input from './Generic/Input';\r\nimport useComms from './hooks/useComms';\r\nimport useSubscription from './hooks/useSubscription';\r\n\r\nimport { ONLINE_ROOT } from '../types/routes';\r\n\r\nconst roomCodeLength = 4;\r\n\r\n/**\r\n * Displays a form where a user can\r\n *   - Set their nickname\r\n *   - Create a room\r\n *     OR\r\n *   - Enter a room code\r\n *   - Join that room\r\n */\r\nconst RoomSelectBase = ({ className }) => {\r\n  const {\r\n    nickname,\r\n    setNickname,\r\n    activeRoomCode,\r\n    setActiveRoomCode,\r\n  } = useContext(ConnectionContext);\r\n\r\n  /**\r\n   * Allow the user to set a nickname\r\n   */\r\n\r\n  const handleNicknameChange = event => {\r\n    const newName = event.target.value;\r\n    setNickname(newName);\r\n  };\r\n\r\n  /**\r\n   * Validates a nickname.\r\n   * Used before creating or joining a room.\r\n   */\r\n  const nicknameIsValid = () => {\r\n    return (\r\n      typeof nickname === 'string' &&\r\n      nickname.length >= 3 &&\r\n      nickname.length <= 32\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Allow the user to set a room code\r\n   */\r\n  const [roomCode, setRoomCode] = useState('');\r\n  const handleRoomCodeChange = event => {\r\n    let newRoomCode = event.target.value;\r\n\r\n    // Limit room code length\r\n    if (newRoomCode.length <= roomCodeLength) {\r\n      newRoomCode = newRoomCode.toUpperCase();\r\n      setRoomCode(newRoomCode);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Validate roomCode.\r\n   */\r\n  const roomCodeIsValid = useCallback(\r\n    roomCodeParam => {\r\n      const roomCodeToCheck = roomCodeParam || roomCode;\r\n      return roomCodeToCheck.length === roomCodeLength;\r\n    },\r\n    [roomCode],\r\n  );\r\n\r\n  // Use our custom useComms hook to communicate with the server.\r\n  const { createRoom } = useComms();\r\n\r\n  /**\r\n   * Pass create room event to its action handler.\r\n   */\r\n  const handleCreateRoom = () => {\r\n    if (nicknameIsValid()) {\r\n      createRoom(nickname);\r\n    }\r\n  };\r\n\r\n  // Subscribe to relevant events.\r\n  const subscriptionSettings = useRef({\r\n    [ROOM_CREATED]: createdRoomCode => {\r\n      setActiveRoomCode(createdRoomCode);\r\n    },\r\n  });\r\n  // Subscribe to the events above.\r\n  useSubscription(subscriptionSettings.current);\r\n\r\n  // If there is an active room code, redirect the user to an OnlineRoom component.\r\n  const [status, setStatus] = useState('INIT');\r\n  useEffect(() => {\r\n    if (activeRoomCode && roomCodeIsValid(activeRoomCode)) {\r\n      setStatus('ROOM_ACTIVE');\r\n    }\r\n  }, [activeRoomCode, roomCodeIsValid]);\r\n\r\n  if (status === 'ROOM_ACTIVE') {\r\n    return <Redirect to={`${ONLINE_ROOT}/${activeRoomCode}`} />;\r\n  }\r\n\r\n  // Otherwise display the Room Select form\r\n  return (\r\n    <div className={className}>\r\n      <Input\r\n        type=\"text\"\r\n        onChange={handleNicknameChange}\r\n        value={nickname}\r\n        placeholder=\"My name is...\"\r\n        aria-label=\"Nickname\"\r\n        aria-required=\"true\"\r\n        style={{ marginBottom: '4rem' }}\r\n      />\r\n\r\n      {nicknameIsValid() && (\r\n        <React.Fragment>\r\n          <Button\r\n            variant=\"main\"\r\n            disabled={!nicknameIsValid()}\r\n            onClick={handleCreateRoom}\r\n          >\r\n            Create room\r\n          </Button>\r\n\r\n          <Divider>OR</Divider>\r\n\r\n          <Input\r\n            type=\"text\"\r\n            onChange={handleRoomCodeChange}\r\n            value={roomCode}\r\n            placeholder=\"Room code\"\r\n            aria-label=\"Room code\"\r\n          />\r\n          <Link to={`/online/${roomCode}`}>\r\n            <Button variant=\"main\" disabled={!roomCodeIsValid()}>\r\n              Join room\r\n            </Button>\r\n          </Link>\r\n        </React.Fragment>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nRoomSelectBase.propTypes = {\r\n  className: PropTypes.string,\r\n};\r\n\r\nconst RoomSelect = styled(RoomSelectBase)``;\r\n\r\nexport default RoomSelect;\r\n","import React, { useContext } from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport ConnectionContext from './contexts/ConnectionContext';\r\n\r\nconst RoomCodeDisplayBase = ({ className }) => {\r\n  // Get the room code from ConnectionContext\r\n  const connection = useContext(ConnectionContext);\r\n  const { activeRoomCode } = connection;\r\n\r\n  return <p className={className}>Room {activeRoomCode}</p>;\r\n};\r\n\r\nRoomCodeDisplayBase.propTypes = {\r\n  className: PropTypes.string,\r\n};\r\n\r\nconst RoomCodeDisplay = styled(RoomCodeDisplayBase)`\r\n  text-align: center;\r\n`;\r\n\r\nexport default RoomCodeDisplay;\r\n","import ls from 'local-storage';\r\n\r\nconst set = obj => {\r\n  const keys = Object.keys(obj);\r\n  keys.forEach(key => {\r\n    const value = obj[key];\r\n    console.log(`Saving to localStorage: { ${key}: ${value} }`);\r\n    ls(key, value);\r\n  });\r\n};\r\n\r\nconst get = key => ls(key);\r\n\r\nexport { set, get };\r\n","import React, { useContext, useState, useRef, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport RoomCodeDisplay from './RoomCodeDisplay';\r\nimport TimerGrid from './Timers/TimerGrid';\r\nimport { ONLINE_ROOT } from '../types/routes';\r\nimport { NONEXISTANT_ROOM, USER_JOINED, MEMBER_LIST } from './actions/actions';\r\n\r\nimport useComms from './hooks/useComms';\r\nimport useSubscription from './hooks/useSubscription';\r\nimport ConnectionContext from './contexts/ConnectionContext';\r\nimport { set as saveToLocalStorage } from '../services/localStorageHandler';\r\n\r\nconst OnlineRoom = props => {\r\n  const [status, setStatus] = useState('INIT'); // INIT, NONEXISTANT_ROOM, NO_NICKNAME, READY\r\n  const { nickname, setActiveRoomCode } = useContext(ConnectionContext);\r\n  const nicknameValid = nickname && nickname.length > 0;\r\n\r\n  const subscriptionSettings = useRef({\r\n    // If a room does not exist, use a subscription to the NONEXISTANT_ROOM event to redirect the user back to selecting a room.\r\n    [NONEXISTANT_ROOM]: () => {\r\n      setStatus('NONEXISTANT_ROOM');\r\n    },\r\n    // On a successful join, update the active room code\r\n    [USER_JOINED]: data => {\r\n      setActiveRoomCode(data.roomCode);\r\n    },\r\n    // When the MEMBER_LIST event is received, the room is ready.\r\n    [MEMBER_LIST]: () => {\r\n      setStatus('READY');\r\n    },\r\n  });\r\n  // Subscribe to the events above.\r\n  useSubscription(subscriptionSettings.current);\r\n\r\n  // Get Room Code from the URL.\r\n  const {\r\n    match: {\r\n      params: { roomCode },\r\n    },\r\n  } = props;\r\n\r\n  // Attempt to join the room\r\n  const { joinRoom } = useComms();\r\n  useEffect(() => {\r\n    if (nicknameValid) {\r\n      // Save valid nickname to localstorage in case of client disconnects\r\n      saveToLocalStorage({ nickname });\r\n      joinRoom(roomCode, nickname);\r\n    } else {\r\n      // Don't join if no nickname is set\r\n      setStatus('NO_NICKNAME');\r\n    }\r\n  }, [joinRoom, roomCode, nickname, nicknameValid]);\r\n\r\n  if (status === 'INIT') {\r\n    return <p>Joining room...</p>;\r\n  }\r\n\r\n  if (status === 'NONEXISTANT_ROOM' || status === 'NO_NICKNAME') {\r\n    return <Redirect to={ONLINE_ROOT} />;\r\n  }\r\n\r\n  if (status === 'READY') {\r\n    return (\r\n      <>\r\n        <RoomCodeDisplay />\r\n        <TimerGrid />\r\n      </>\r\n    );\r\n  }\r\n\r\n  return <p>Unknown OnlineRoom status</p>;\r\n};\r\n\r\nOnlineRoom.propTypes = {\r\n  match: PropTypes.object,\r\n};\r\n\r\nexport default OnlineRoom;\r\n","import io from 'socket.io-client';\r\nimport uuid from 'uuid/v4';\r\nimport * as actions from '../components/actions/actions';\r\nimport { publish } from '../components/MessageCenter';\r\n\r\nconst createSocket = () => {\r\n  // Connect to the socket\r\n  const serverUrl =\r\n    process.env.NODE_ENV === 'development'\r\n      ? 'http://localhost:1338'\r\n      : 'https://sea-of-thieves-cooking-timer.herokuapp.com';\r\n\r\n  const socket = io(serverUrl);\r\n\r\n  return socket;\r\n};\r\n\r\nconst startListening = socket => {\r\n  // Someone joined the room.\r\n  socket.on(actions.USER_JOINED, data => {\r\n    const { nickname, timestamp, roomCode } = data;\r\n    publish(actions.USER_JOINED, {\r\n      type: actions.USER_JOINED,\r\n      id: uuid(),\r\n      nickname,\r\n      timestamp,\r\n      roomCode,\r\n    });\r\n  });\r\n\r\n  // User themself joined a room.\r\n  socket.on(actions.MEMBER_LIST, data => {\r\n    const { timestamp, members } = data;\r\n    publish(actions.MEMBER_LIST, {\r\n      type: actions.MEMBER_LIST,\r\n      id: uuid(),\r\n      timestamp,\r\n      members,\r\n    });\r\n  });\r\n\r\n  // Someone else left the room.\r\n  socket.on(actions.USER_LEFT, data => {\r\n    const { nickname, timestamp } = data;\r\n    publish(actions.USER_LEFT, {\r\n      type: actions.USER_LEFT,\r\n      id: uuid(),\r\n      nickname,\r\n      timestamp,\r\n    });\r\n  });\r\n\r\n  // Room was created.\r\n  socket.on(actions.ROOM_CREATED, data => {\r\n    const { roomCode } = data;\r\n    publish(actions.ROOM_CREATED, roomCode);\r\n    // console.log(`🚪 Room code: ${roomCode}`);\r\n  });\r\n\r\n  // Client tried to join a room that doesn't exist.\r\n  socket.on(actions.NONEXISTANT_ROOM, data => {\r\n    const { roomCode, timestamp } = data;\r\n    publish(actions.NONEXISTANT_ROOM, {\r\n      type: actions.NONEXISTANT_ROOM,\r\n      id: uuid(),\r\n      roomCode,\r\n      timestamp,\r\n    });\r\n  });\r\n\r\n  // Server sent timers.\r\n  socket.on(actions.TIMER_SYNC, data => {\r\n    const { timers, message } = data;\r\n    publish(actions.TIMER_SYNC, {\r\n      type: actions.TIMER_SYNC,\r\n      id: uuid(),\r\n      timestamp: new Date().toString(),\r\n      timers,\r\n      message,\r\n    });\r\n  });\r\n\r\n  // Generic message\r\n  socket.on(actions.GENERIC_MESSAGE, data => {\r\n    const { message } = data;\r\n\r\n    publish(actions.GENERIC_MESSAGE, {\r\n      type: actions.GENERIC_MESSAGE,\r\n      id: uuid(),\r\n      timestamp: new Date().toString(),\r\n      message,\r\n    });\r\n  });\r\n};\r\n\r\nconst stopListening = socket => {\r\n  socket.off(actions.USER_JOINED);\r\n  socket.off(actions.USER_LEFT);\r\n  socket.off(actions.NONEXISTANT_ROOM);\r\n  socket.off(actions.MEMBER_LIST);\r\n  socket.off(actions.ROOM_CREATED);\r\n\r\n  console.log('Removed event listeners');\r\n};\r\n\r\nexport { createSocket, startListening, stopListening };\r\nexport default createSocket;\r\n","import React, { useState, useRef } from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport { uniqueNamesGenerator } from 'unique-names-generator';\r\n\r\nimport ConnectionContext from './contexts/ConnectionContext';\r\nimport RoomSelect from './RoomSelect';\r\nimport OnlineRoom from './OnlineRoom';\r\nimport { createSocket, startListening } from '../services/socketHandler';\r\nimport * as routes from '../types/routes';\r\nimport { get as getFromLocalStorage } from '../services/localStorageHandler';\r\n\r\n/**\r\n * Auto-populate fields in development for faster testing\r\n */\r\nconst useDebugValues = false;\r\nlet initialNickname = getFromLocalStorage('nickname') || '';\r\nif (process.env.NODE_ENV === 'development' && useDebugValues) {\r\n  initialNickname = uniqueNamesGenerator('-', true);\r\n}\r\n\r\n/**\r\n * User has selected to go Online. This component handles things from there on:\r\n * - Username selection\r\n * - Create or join room\r\n */\r\nconst Online = () => {\r\n  const [activeRoomCode, setActiveRoomCode] = useState(null);\r\n  const [nickname, setNickname] = useState(initialNickname);\r\n\r\n  // Create an empty socket and a mock socket.\r\n  const socket = useRef();\r\n\r\n  // If no socket has been set, create a new one.\r\n  // We add this directly to the socket ref to prevent unnecessary changes to it in the future.\r\n  if (socket.current === undefined) {\r\n    console.log('No socket set. Creating!');\r\n    socket.current = createSocket();\r\n\r\n    // Initialize event listeners on the socket.\r\n    startListening(socket.current);\r\n  }\r\n  if (!socket.current) {\r\n    console.log('Weird case of no socket whatsoever');\r\n    return null;\r\n  }\r\n\r\n  const connection = {\r\n    socket: socket.current,\r\n    nickname,\r\n    setNickname: newNickname => setNickname(newNickname),\r\n    activeRoomCode,\r\n    setActiveRoomCode: roomCode => setActiveRoomCode(roomCode),\r\n  };\r\n\r\n  return (\r\n    <ConnectionContext.Provider value={connection}>\r\n      <Switch>\r\n        <Route\r\n          path={`${routes.ONLINE_ROOT}/:roomCode`}\r\n          component={OnlineRoom}\r\n        />\r\n        <Route path=\"/\" component={RoomSelect} />\r\n      </Switch>\r\n    </ConnectionContext.Provider>\r\n  );\r\n};\r\n\r\nexport default Online;\r\n","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport PropTypes from 'prop-types';\n\n/**\n * Displays the timestamp of a given message\n */\nconst TimeContainer = styled.span`\n  padding-right: 0.5rem;\n  color: #9f9f9f;\n`;\n\n/**\n * Structure of a message.\n */\nconst MessageBase = ({ className, timestamp, children }) => {\n  const date = new Date(timestamp);\n\n  return (\n    <p className={className}>\n      <TimeContainer>{`${date.getHours()}:${date.getMinutes()}`}</TimeContainer>\n      <span>{children}</span>\n    </p>\n  );\n};\n\nMessageBase.propTypes = {\n  className: PropTypes.string,\n  timestamp: PropTypes.string,\n  children: PropTypes.node,\n};\n\n// Fade messages out after some time.\nconst fadeOut = keyframes`\n  from {\n    opacity: 1;\n  }\n\n  to {\n    opacity: 0;\n  }\n`;\n\n/**\n * Styled message structure\n */\nconst Message = styled(MessageBase)`\n  background-color: white;\n  display: inline-flex;\n  padding: 0.5rem 1rem;\n  border-radius: 1rem;\n  color: ${({ theme }) => theme.palette.typography.dark};\n  margin: 0.15rem;\n  animation: ${fadeOut} 1s ease-out 6s 1 forwards;\n`;\n\nexport default Message;\n","import * as actions from '../components/actions/actions';\r\n\r\n/**\r\n * Templates for various types of messages.\r\n */\r\nconst messageTemplates = {};\r\n\r\nmessageTemplates[actions.USER_JOINED] = data => {\r\n  const { nickname, roomCode } = data;\r\n  return `${nickname} joined room ${roomCode}`;\r\n};\r\n\r\nmessageTemplates[actions.MEMBER_LIST] = ({ members }) => {\r\n  const memberString = members.join(', ');\r\n  return `Current members: ${memberString}`;\r\n};\r\n\r\nmessageTemplates[actions.USER_LEFT] = ({ nickname }) => {\r\n  return `${nickname} left`;\r\n};\r\n\r\nmessageTemplates[actions.NONEXISTANT_ROOM] = ({ roomCode }) => {\r\n  return `Room ${roomCode} doesn't exist`;\r\n};\r\n\r\nmessageTemplates[actions.TIMER_SYNC] = ({ message }) => {\r\n  return message;\r\n};\r\n\r\nmessageTemplates[actions.GENERIC_MESSAGE] = ({ message }) => {\r\n  return message;\r\n};\r\n\r\nexport default messageTemplates;\r\n","/**\n * Generic message data type to the front end.\n * @param {string} id        Identifier used primarily in React components' key attribute.\n * @param {string} timestamp Timestamp for when the event for this message happened.\n * @param {string} content   Actual message content.\n */\nclass Message {\n  constructor({ id, timestamp, content }) {\n    this.id = id;\n    this.timestamp = timestamp;\n    this.content = content;\n  }\n}\n\nexport default Message;\n","import React, { useState, useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {\r\n  USER_JOINED,\r\n  USER_LEFT,\r\n  MEMBER_LIST,\r\n  NONEXISTANT_ROOM,\r\n  TIMER_SYNC,\r\n  GENERIC_MESSAGE,\r\n} from '../actions/actions';\r\nimport useSubscription from '../hooks/useSubscription';\r\nimport SingleMessage from './SingleMessage';\r\nimport messageTemplates from '../../types/messageTemplates';\r\nimport Message from '../../types/message';\r\n\r\n// List of events this component subscribes to (and handles).\r\nconst MAX_MESSAGES = 7;\r\n\r\nconst MessageDisplayBase = ({ className }) => {\r\n  // Store messages in state.\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  // Build human-readable messages out of data that is received.\r\n  const handleMessage = data => {\r\n    const { id, type, timestamp, ...otherData } = data;\r\n\r\n    // Set the message content via messageTemplates.\r\n    const content = messageTemplates[type](otherData);\r\n    const newMessage = new Message({ id, timestamp, content });\r\n\r\n    setMessages(prevMessages => {\r\n      const newMessages = [...prevMessages, newMessage];\r\n      return newMessages;\r\n    });\r\n  };\r\n\r\n  // Store our subscription settings in a ref. We don't want to change these over the course of the component's lifetime.\r\n  const subscriptionSettings = useRef({\r\n    [USER_JOINED]: data => {\r\n      handleMessage(data);\r\n    },\r\n    [USER_LEFT]: data => {\r\n      handleMessage(data);\r\n    },\r\n    [MEMBER_LIST]: data => {\r\n      handleMessage(data);\r\n    },\r\n    [NONEXISTANT_ROOM]: data => {\r\n      handleMessage(data);\r\n    },\r\n    [TIMER_SYNC]: data => {\r\n      if (data.message) handleMessage(data);\r\n    },\r\n    [GENERIC_MESSAGE]: data => {\r\n      handleMessage(data);\r\n    },\r\n  });\r\n  // Subscribe to the events above.\r\n  useSubscription(subscriptionSettings.current);\r\n\r\n  return (\r\n    <div className={className}>\r\n      {// Only show a portion of the latest messages.\r\n      messages.slice(MAX_MESSAGES * -1).map(msg => (\r\n        <SingleMessage key={`${msg.id}`} timestamp={msg.timestamp}>\r\n          {msg.content}\r\n        </SingleMessage>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nMessageDisplayBase.propTypes = {\r\n  className: PropTypes.string,\r\n};\r\n\r\nconst MessageDisplay = styled(MessageDisplayBase)`\r\n  position: absolute;\r\n  bottom: 2.5rem;\r\n  left: 0.25rem;\r\n  right: 0.25rem;\r\n  text-align: right;\r\n  z-index: 999;\r\n  user-select: none;\r\n  pointer-events: none;\r\n\r\n  & span {\r\n    text-align: left;\r\n  }\r\n`;\r\n\r\nexport default MessageDisplay;\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport Header from './Header';\r\nimport AppControls from './AppControls';\r\n\r\nimport Welcome from './Welcome';\r\nimport Offline from './Offline';\r\nimport Online from './Online';\r\nimport MessageDisplay from './MessageDisplay/MessageDisplay';\r\nimport * as routes from '../types/routes';\r\n\r\n/**\r\n * Actual main app content.\r\n */\r\nconst Main = () => {\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Switch>\r\n        <Route exact path={routes.OFFLINE} component={Offline} />\r\n        <Route path={routes.ONLINE_ROOT} component={Online} />\r\n        <Route path={routes.ROOT} component={Welcome} />\r\n      </Switch>\r\n      <MessageDisplay />\r\n      <AppControls />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport { ThemeProvider } from 'styled-components';\r\nimport WebFont from 'webfontloader';\r\n\r\nimport theme from './styles/theme';\r\nimport GlobalStyles from './styles/GlobalStyles';\r\n\r\nimport Main from './components/Main';\r\n\r\nWebFont.load({\r\n  google: {\r\n    families: ['Montserrat:500,600,800', 'serif'],\r\n  },\r\n});\r\n\r\nconst devBasename = '/';\r\nconst prodBasename = '/sea-of-thieves-cooking-timer';\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <>\r\n        <GlobalStyles />\r\n        <BrowserRouter\r\n          basename={\r\n            process.env.NODE_ENV === 'development' ? devBasename : prodBasename\r\n          }\r\n        >\r\n          <Main />\r\n        </BrowserRouter>\r\n      </>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/annoying-vuvuzela-tone.7c0e3fdb.mp3\";"],"sourceRoot":""}