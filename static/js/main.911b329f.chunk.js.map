{"version":3,"sources":["styles/theme.jsx","styles/GlobalStyles.jsx","components/Header.jsx","types/Timer.js","components/FoodSelectButton.jsx","components/Timers/TimerComponent.jsx","components/TimerGrid.jsx","components/AppControls.jsx","components/Main.jsx","App.js","serviceWorker.js","index.js"],"names":["baseFonts","theme","palette","primary","main","light","dark","secondary","success","error","typography","base","fontFamily","join","title","concat","emoji","transition","duration","timingFunction","appDrawer","width","mobile","open","closed","desktop","GlobalStyles","createGlobalStyle","_templateObject","_ref","_ref2","_ref3","props","Header","styled","className","react_default","a","createElement","Header_templateObject","foods","FISH","TROPHY_FISH","MEAT","MONSTER_MEAT","TEST","null","Timer","food","_this","this","Object","classCallCheck","setFood","newFood","keys","includes","start","startDate","Date","isRunning","stop","getTimeLeft","currentTime","timeElapsed","timeLeft","Math","round","id","uuid","FoodSelectButton","onClick","children","type","FoodSelectButton_templateObject","GridBase","grid","TimerComponent_templateObject","Grid","_templateObject2","changeFood","components_FoodSelectButton","_templateObject3","TimerGrid_templateObject","TimerGrid_templateObject2","Timers","_useState","useState","_useState2","slicedToArray","timers","_useState3","_useState4","date","setDate","useEffect","timerID","setInterval","clearInterval","TimerGrid_Grid","map","timer","index","TimerComponent","key","AppControls","AppControls_templateObject","Main","Fragment","components_Header","TimerGrid","components_AppControls","WebFont","load","google","families","App","styled_components_browser_esm","styles_GlobalStyles","components_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.911b329f.chunk.js","sourcesContent":["const baseFonts = ['Roboto', 'Arial', 'sans-serif'];\n\nexport default {\n  palette: {\n    primary: {\n      main: '#efd71f',\n      light: '#fff8bf',\n      dark: '#59563d',\n    },\n    secondary: {\n      main: '#FFE2BC',\n      light: '#FFF9F0',\n      dark: '#C79349',\n    },\n    success: {\n      main: '#319F4A',\n      light: '#55D370',\n      dark: '#257134',\n    },\n    error: {\n      main: '#D34E41',\n      light: '#FF7365',\n      dark: '#953930',\n    },\n    typography: {\n      light: '#FFFFFF',\n      dark: '#020202',\n    },\n  },\n  typography: {\n    base: {\n      fontFamily: baseFonts.join(','),\n    },\n    title: {\n      fontFamily: ['Montserrat', ...baseFonts].join(','),\n    },\n  },\n  emoji: 'ðŸ¥¥',\n  transition: {\n    duration: '0.2s',\n    timingFunction: 'ease-out',\n  },\n  appDrawer: {\n    width: {\n      mobile: {\n        open: '90vw',\n        closed: '0',\n      },\n      desktop: {\n        open: '240px',\n        closed: '0',\n      },\n    },\n  },\n};\n","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyles = createGlobalStyle`\n  body {\n    font-family: ${({ theme }) => theme.typography.base.fontFamily};\n    color: ${({ theme }) => theme.palette.typography.light};\n    background-color: #1A1A1A;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    font-family: ${({ theme }) => theme.typography.title.fontFamily};\n    font-weight: 600;\n\n    svg {\n      vertical-align: middle;\n      margin-right: 0.3em;\n      margin-top: -0.5%;\n    }\n  }\n\n  h1, h2 {\n    font-weight: 700;\n  }\n\n  h3 {\n    color: ${props => props.theme.palette.primary.dark}\n  }\n`;\n\nexport default GlobalStyles;\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst HeaderContent = ({ className }) => {\n  return (\n    <div className={className}>\n      <h1>Cooking Timer</h1>\n    </div>\n  );\n};\n\nHeaderContent.propTypes = {\n  className: PropTypes.string,\n};\n\nconst Header = styled(HeaderContent)`\n  height: 50px;\n  background-color: ${({ theme }) => theme.palette.primary.main};\n  color: black;\n\n  h1 {\n    margin: 0;\n    padding: 0.5rem 0.25rem;\n    text-align: center;\n  }\n`;\n\nexport default Header;\n","import uuid from 'uuid/v4';\n\nconst foods = {\n  FISH: {\n    duration: 40,\n  },\n  TROPHY_FISH: {\n    duration: 90,\n  },\n  MEAT: {\n    duration: 60,\n  },\n  MONSTER_MEAT: {\n    duration: 120,\n  },\n  TEST: {\n    duration: 2,\n  },\n  null: {\n    duration: 0,\n  },\n};\n\n/**\n * General Timer data structure.\n * @param {string} food What food the timer is tracking. Null means a selection hasn't been made.\n */\nclass Timer {\n  constructor(food) {\n    this.food = food || null;\n    this.id = uuid();\n    this.isRunning = false;\n    this.startDate = null;\n    this.timeElapsed = 0;\n  }\n\n  /**\n   * Change the current food.\n   * @returns {object} This Timer object.\n   */\n  setFood = newFood => {\n    if (Object.keys(foods).includes(newFood)) {\n      this.food = newFood;\n    }\n    return this;\n  };\n\n  /**\n   * Start the timer.\n   */\n  start = () => {\n    this.startDate = new Date();\n    this.isRunning = true;\n  };\n\n  /**\n   * Stops the timer and clears any food that was set.\n   */\n  stop = () => {\n    this.food = null;\n    this.isRunning = false;\n    this.startDate = null;\n  };\n\n  /**\n   * Returns the time left in this counter.\n   */\n  getTimeLeft = () => {\n    if (this.isRunning) {\n      // Calculate time that has elapsed since starting the counter.\n      const currentTime = new Date();\n      this.timeElapsed = currentTime - this.startDate;\n\n      // Calculate seconds that are left\n      const timeLeft = foods[this.food].duration - this.timeElapsed / 1000;\n\n      // Stop the timer if we reach 0\n      if (timeLeft <= 0) {\n        this.stop();\n      }\n\n      return Math.round(timeLeft);\n    }\n\n    return 0;\n  };\n}\n\nexport default Timer;\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst FoodSelectButtonBase = ({ onClick, children, className }) => {\n  return (\n    <button type=\"button\" onClick={onClick} className={className}>\n      {children}\n    </button>\n  );\n};\n\nconst FoodSelectButton = styled(FoodSelectButtonBase)`\n  position: relative;\n  margin: 0;\n  padding: 0rem;\n  border: none;\n  font: inherit;\n  color: inherit;\n  background-color: transparent;\n  /* show a hand cursor on hover; some argue that we\n  should keep the default arrow cursor for buttons */\n  cursor: pointer;\n\n  background-color: ${({ theme }) => theme.palette.primary.main};\n  color: ${({ theme }) => theme.palette.typography.dark};\n\n  width: calc(100% - 6px);\n  height: calc(100% - 6px);\n  margin: 3px;\n`;\n\nFoodSelectButtonBase.propTypes = {\n  onClick: PropTypes.func,\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]),\n  className: PropTypes.string,\n};\n\nexport default FoodSelectButton;\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nimport grid from 'easy-grid';\n\nimport FoodSelectButton from '../FoodSelectButton';\n\nconst GridBase = grid`\n    50% 50%\n40% A   B\n40% C   D\n20% E   E\n`;\n\nconst Grid = styled(GridBase)`\n  width: 100%;\n  height: 100%;\n`;\n\n/**\n * Main Timer component.\n * Initially shows a selection of available timers.\n * When a timer is selected, sets up a timer for that duration.\n * Displays imagery related to what's cooking.\n */\nconst TimerBase = ({ food, changeFood, timeLeft, className }) => {\n  if (food) {\n    return (\n      <div className={className}>\n        <p>{food} is cooking</p>\n        <h2>{timeLeft}</h2>\n      </div>\n    );\n  }\n  return (\n    <div className={className}>\n      <Grid>\n        <FoodSelectButton onClick={changeFood('FISH')}>Fish</FoodSelectButton>\n        <FoodSelectButton onClick={changeFood('TROPHY_FISH')}>\n          Trophy Fish\n        </FoodSelectButton>\n        <FoodSelectButton onClick={changeFood('MEAT')}>Meat</FoodSelectButton>\n        <FoodSelectButton onClick={changeFood('MONSTER_MEAT')}>\n          Monster meat\n        </FoodSelectButton>\n        <FoodSelectButton onClick={changeFood('TEST')}>Test</FoodSelectButton>\n      </Grid>\n    </div>\n  );\n};\n\nTimerBase.propTypes = {\n  food: PropTypes.string,\n  changeFood: PropTypes.func,\n  timeLeft: PropTypes.number,\n  className: PropTypes.string,\n};\n\nconst Timer = styled(TimerBase)`\n  height: calc(100% - 0.5rem);\n  width: calc(100% - 0.5rem);\n  padding: 0.1rem;\n  margin: 0.25rem;\n  background-color: ${({ theme }) => theme.palette.primary.dark};\n\n  text-align: center;\n`;\n\nexport default Timer;\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\n\nimport grid from 'easy-grid';\n\nimport Timer from '../types/Timer';\nimport TimerComponent from './Timers/TimerComponent';\n\nconst GridBase = grid`\n    50%   50%\n50% A     B\n50% C     D\n`;\n\nconst Grid = styled(GridBase)`\n  width: calc(100vw - 1rem);\n  height: calc(100vw - 1rem);\n  margin: 0.5rem;\n`;\n\n// Currently the grid only allows us to create a predefined amount of timers.\n// Look into generating layouts dynamically!\nconst Timers = () => {\n  const [timers, setTimers] = useState([\n    new Timer(),\n    new Timer(),\n    new Timer(),\n    new Timer(),\n  ]);\n\n  // Give this component an internal date that refreshes each timer.\n  const [date, setDate] = useState(new Date());\n\n  // Ticking function to update the stored date.\n  const tick = () => {\n    setDate(new Date());\n  };\n\n  /**\n   * Set up an internal interval to call tick()\n   */\n  useEffect(() => {\n    const timerID = setInterval(() => tick(), 100);\n\n    return function cleanup() {\n      clearInterval(timerID);\n    };\n  });\n\n  /**\n   * On each tick, update all timers.\n   */\n  useEffect(() => {\n    // timers.forEach(timer => {\n    //   timer.tick();\n    // });\n  }, [date]);\n\n  /**\n   * Handles changing food of a given Timer.\n   * @param {number} index   Index of the timer whose food to change.\n   * @param {string} newFood New food.\n   */\n  const changeFood = (index, newFood) => () => {\n    // setTimers([\n    //   ...timers.slice(0, index),\n    //   timers[index].setFood(newFood),\n    //   ...timers.slice(Math.min(index + 1, timers.length), timers.length),\n    // ]);\n\n    timers[index].setFood(newFood);\n    timers[index].start();\n  };\n\n  return (\n    <Grid>\n      {timers.map((timer, index) => (\n        <TimerComponent\n          food={timer.food}\n          changeFood={newFood => changeFood(index, newFood)}\n          timeLeft={timer.getTimeLeft()}\n          key={timer.id}\n        />\n      ))}\n    </Grid>\n  );\n};\n\nexport default Timers;\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst AppControlsContent = ({ className }) => {\n  return (\n    <div className={className}>\n      <div>App Controls here</div>\n    </div>\n  );\n};\n\nAppControlsContent.propTypes = {\n  className: PropTypes.string,\n};\n\nconst AppControls = styled(AppControlsContent)`\n  height: 30px;\n  background-color: #efd71f;\n  color: black;\n\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  text-align: center;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport default AppControls;\n","import React from 'react';\r\n\r\nimport Header from './Header';\r\nimport TimerGrid from './TimerGrid';\r\nimport AppControls from './AppControls';\r\n\r\n/**\r\n * Actual main app content.\r\n */\r\nconst Main = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <Header />\r\n      <TimerGrid />\r\n      <AppControls />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\n\nimport { ThemeProvider } from 'styled-components';\nimport WebFont from 'webfontloader';\n\nimport theme from './styles/theme';\nimport GlobalStyles from './styles/GlobalStyles';\n\nimport Main from './components/Main';\n\nWebFont.load({\n  google: {\n    families: ['Montserrat:500,600,800', 'serif'],\n  },\n});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <React.Fragment>\n        <GlobalStyles />\n        <Main />\n      </React.Fragment>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}