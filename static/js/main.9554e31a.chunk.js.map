{"version":3,"sources":["styles/theme.jsx","styles/GlobalStyles.jsx","components/Header.jsx","types/routes.js","components/AppControls.jsx","components/Generic/LinkButton.jsx","services/fakeSocket.js","components/Welcome.jsx","../../server/lib/types/Room.js","../../server/lib/types/Timer.js","components/MessageCenter.js","components/actions/actions.js","components/contexts/ConnectionContext.jsx","components/hooks/useSubscription.jsx","components/hooks/useComms.jsx","components/Generic/Grids/FourByFourGrid.jsx","components/Timers/TimerStates/Running.jsx","components/Timers/TimerStates/Stopped.jsx","components/Generic/Grids/TimerButtonGrid.jsx","components/Timers/FoodSelectButton.jsx","components/Timers/TimerStates/Select.jsx","components/Timers/OnlineTimer.jsx","components/Timers/TimerGrid.jsx","components/Offline.jsx","components/Generic/Button.jsx","components/Generic/Divider.jsx","components/Generic/Input.jsx","components/RoomSelect.jsx","components/RoomCodeDisplay.jsx","services/localStorageHandler.js","components/OnlineRoom.jsx","services/socketHandler.js","components/Online.jsx","components/MessageDisplay/SingleMessage.jsx","types/messageTemplates.js","types/message.js","components/MessageDisplay/MessageDisplay.jsx","components/Main.jsx","App.js","serviceWorker.js","index.js","assets/sound/annoying-vuvuzela-tone.mp3"],"names":["baseFonts","palette","primary","main","light","dark","secondary","success","error","disabled","typography","base","fontFamily","join","title","emoji","transition","duration","timingFunction","appDrawer","width","mobile","open","closed","desktop","GlobalStyles","createGlobalStyle","theme","props","Header","styled","className","to","AppControls","room","LinkButton","children","variant","Welcome","Fragment","Room","code","this","members","timers","abandonedSince","key","value","_this","Object","keys","map","id","nickname","user","length","Date","timer","push","iterations","i","Error","concat","foods","FISH","name","TROPHY_FISH","MEAT","MONSTER_MEAT","Timer","state","startDate","food","includes","toString","foodName","TypeError","MessageCenter","Subject","publish","topic","data","next","publishTimerSync","type","uuid","timestamp","fakeSocket","init","amount","addTimer","addTimers","on","action","console","log","emit","getTimer","start","reset","message","ConnectionContext","createContext","useSubscription","subs","subscription","useRef","useEffect","topics","current","pipe","filter","subscribe","unsubscribe","useComms","socket","useContext","joinRoom","useCallback","roomCode","createRoom","requestTimers","GridBase","grid","Grid","Running","timeLeft","Button","button","Stopped","onClick","FoodSelectButton","Select","TimerButtonGrid","NewTimer","useState","soundHasPlayed","setSoundHasPlayed","currentTime","startTime","Math","max","round","getTimeLeft","Audio","audioFile","play","TimerGrid","setTimers","timerCount","subscriptionSettings","setDate","timerID","setInterval","clearInterval","FourByFourGrid","Offline","Provider","rest","DividerText","p","Divider","Input","input","RoomSelect","setNickname","activeRoomCode","setActiveRoomCode","nicknameIsValid","setRoomCode","roomCodeIsValid","roomCodeParam","createdRoomCode","status","setStatus","onChange","event","newName","target","placeholder","aria-label","aria-required","style","marginBottom","newRoomCode","toUpperCase","RoomCodeDisplay","OnlineRoom","nicknameValid","match","params","obj","forEach","ls","createSocket","io","initialNickname","Online","undefined","startListening","connection","newNickname","path","component","TimeContainer","span","fadeOut","keyframes","Message","date","getHours","getMinutes","messageTemplates","memberString","content","MessageDisplay","messages","setMessages","handleMessage","otherData","newMessage","prevMessages","slice","MAX_MESSAGES","msg","SingleMessage","Main","exact","WebFont","load","google","families","prodBasename","App","basename","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.9554e31a.chunk.js","sourcesContent":["const baseFonts = ['Roboto', 'Arial', 'sans-serif'];\n\nexport default {\n  palette: {\n    primary: {\n      main: '#efd71f',\n      light: '#fff8bf',\n      dark: '#59563d',\n    },\n    secondary: {\n      main: '#FFE2BC',\n      light: '#FFF9F0',\n      dark: '#C79349',\n    },\n    success: {\n      main: '#319F4A',\n      light: '#55D370',\n      dark: '#257134',\n    },\n    error: {\n      main: '#D34E41',\n      light: '#FF7365',\n      dark: '#953930',\n    },\n    disabled: {\n      main: '#7A7A7A',\n    },\n    typography: {\n      light: '#FFFFFF',\n      dark: '#020202',\n    },\n  },\n  typography: {\n    base: {\n      fontFamily: baseFonts.join(','),\n    },\n    title: {\n      fontFamily: ['Montserrat', ...baseFonts].join(','),\n    },\n  },\n  emoji: '🥥',\n  transition: {\n    duration: '0.2s',\n    timingFunction: 'ease-out',\n  },\n  appDrawer: {\n    width: {\n      mobile: {\n        open: '90vw',\n        closed: '0',\n      },\n      desktop: {\n        open: '240px',\n        closed: '0',\n      },\n    },\n  },\n};\n","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyles = createGlobalStyle`\n  body {\n    font-family: ${({ theme }) => theme.typography.base.fontFamily};\n    color: ${({ theme }) => theme.palette.typography.light};\n    background-color: #1A1A1A;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    font-family: ${({ theme }) => theme.typography.title.fontFamily};\n    font-weight: 600;\n\n    svg {\n      vertical-align: middle;\n      margin-right: 0.3em;\n      margin-top: -0.5%;\n    }\n  }\n\n  h1, h2 {\n    font-weight: 700;\n  }\n\n  h3 {\n    color: ${props => props.theme.palette.primary.dark}\n  }\n`;\n\nexport default GlobalStyles;\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { ROOT } from '../types/routes';\n\nconst HeaderContent = ({ className }) => {\n  return (\n    <div className={className}>\n      <Link to={ROOT}>\n        <h1>Cooking Timer</h1>\n      </Link>\n    </div>\n  );\n};\n\nHeaderContent.propTypes = {\n  className: PropTypes.string,\n};\n\nconst Header = styled(HeaderContent)`\n  height: 50px;\n  background-color: ${({ theme }) => theme.palette.primary.main};\n  color: black;\n\n  h1 {\n    margin: 0;\n    padding: 0.5rem 0.25rem;\n    text-align: center;\n  }\n`;\n\nexport default Header;\n","const ROOT = '/';\nconst OFFLINE = '/offline';\nconst ONLINE_ROOT = '/online';\n// const ROOM_SELECT = `${ONLINE_ROOT}/room-select`;\n\nexport { ROOT, OFFLINE, ONLINE_ROOT };\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst AppControlsContent = ({ className }) => {\n  return (\n    <div className={className}>\n      <div>App Controls here</div>\n    </div>\n  );\n};\n\nAppControlsContent.propTypes = {\n  className: PropTypes.string,\n};\n\nconst AppControls = styled(AppControlsContent)`\n  height: 30px;\n  background-color: #efd71f;\n  color: black;\n\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  text-align: center;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport default AppControls;\n","// eslint-disable ts-styled-plugin\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nconst LinkButtonBase = ({ to, className, children }) => {\n  return (\n    <Link to={to} className={className}>\n      {children}\n    </Link>\n  );\n};\n\nLinkButtonBase.propTypes = {\n  to: PropTypes.string,\n  className: PropTypes.string,\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n};\n\nconst LinkButton = styled(LinkButtonBase)`\n  display: ${({ variant }) => (variant === 'inline' ? 'inline-block' : 'block')}\n  background-color: ${({ theme }) => theme.palette.primary.main};\n  color: ${({ theme }) => theme.palette.typography.dark};\n  margin-top: 0.5rem;\n  margin-bottom: 0.5rem;\n  margin-left: ${({ variant }) => (variant === 'inline' ? '0.5rem' : 'auto')}\n  margin-right: ${({ variant }) => (variant === 'inline' ? '0.5rem' : 'auto')}\n  padding: 0.5rem 1rem;\n  text-decoration: none;\n\n  border-radius: 3rem;\n  text-transform: uppercase;\n\n  &:disabled {\n    background-color: ${({ theme }) => theme.palette.disabled.main};\n    pointer-events: none;\n  }\n`;\n\nexport default LinkButton;\n","import uuid from 'uuid/v4';\nimport Room from 'sea-of-thieves-cooking-timer-server/lib/types/Room'; // eslint-disable-line import/no-extraneous-dependencies\nimport Timer from 'sea-of-thieves-cooking-timer-server/lib/types/Timer'; // eslint-disable-line import/no-extraneous-dependencies\n\nimport { publish } from '../components/MessageCenter';\nimport * as actions from '../components/actions/actions';\n\n// Keep track of timers here.\nlet room;\n\nconst addTimers = amount => {\n  for (let i = 0; i < amount; i += 1) {\n    room.addTimer(new Timer(uuid()));\n  }\n};\n\nconst publishTimerSync = () => {\n  publish(actions.TIMER_SYNC, {\n    type: actions.TIMER_SYNC,\n    id: uuid(),\n    timestamp: new Date().toString(),\n    timers: room.timers,\n  });\n};\n\nconst fakeSocket = {\n  init: () => {\n    // console.log('fakeSocket init');\n\n    // Create a new room\n    const roomCode = 'LOCL';\n    room = new Room(roomCode);\n    // Populate it with timers.\n    addTimers(4);\n\n    publish(actions.ROOM_CREATED, roomCode);\n  },\n\n  // Actions emitted BY the fake socket.\n  on: (action, data) => console.log('fakeSocket on:', action, data),\n\n  // Actions that were emitted TO the fake socket.\n  emit: (action, data) => {\n    // console.log('fakeSocket emit:', action, data);\n\n    switch (action) {\n      case actions.REQUEST_TIMERS: {\n        publishTimerSync();\n        break;\n      }\n\n      case actions.START: {\n        const { id, food } = data;\n\n        // Start the timer\n        room.getTimer(id).start(food);\n\n        // Send a timer sync event\n        publishTimerSync();\n        break;\n      }\n\n      case actions.RESET: {\n        const { id } = data;\n        room.getTimer(id).reset();\n\n        publishTimerSync();\n        break;\n      }\n\n      default: {\n        publish(actions.GENERIC_MESSAGE, {\n          type: actions.GENERIC_MESSAGE,\n          id: uuid(),\n          timestamp: new Date().toString(),\n          message: `fakeSocket has no handler for your action. ${action}`,\n        });\n      }\n    }\n  },\n};\n\nexport default fakeSocket;\n","import React from 'react';\n\nimport { ONLINE_ROOT, OFFLINE } from '../types/routes';\nimport LinkButton from './Generic/LinkButton';\n\n/**\n * Welcome page for new users.\n * Displays option to use the timers offline or online.\n */\nconst Welcome = () => {\n  return (\n    <React.Fragment>\n      <LinkButton to={OFFLINE} variant=\"inline\">\n        Offline\n      </LinkButton>\n      <LinkButton to={ONLINE_ROOT} variant=\"inline\">\n        Online\n      </LinkButton>\n    </React.Fragment>\n  );\n};\n\nexport default Welcome;\n","import _classCallCheck from \"/mnt/d/Misacorp/GitHub/sea-of-thieves-cooking-timer/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/mnt/d/Misacorp/GitHub/sea-of-thieves-cooking-timer/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar Room =\n/*#__PURE__*/\nfunction () {\n  function Room(code) {\n    _classCallCheck(this, Room);\n\n    this.code = code;\n    this.members = {}; // id: { nickname: ___ }\n\n    this.timers = [];\n    this.abandonedSince = null;\n  }\n\n  _createClass(Room, [{\n    key: \"getMemberNames\",\n    value: function getMemberNames() {\n      var _this = this;\n\n      return Object.keys(this.members).map(function (id) {\n        return _this.members[id].nickname;\n      });\n    }\n  }, {\n    key: \"getMemberById\",\n    value: function getMemberById(id) {\n      return this.members[id];\n    }\n  }, {\n    key: \"addMember\",\n    value: function addMember(user) {\n      this.members[user.id] = user;\n      this.abandonedSince = null;\n    }\n  }, {\n    key: \"removeMember\",\n    value: function removeMember(id) {\n      delete this.members[id]; // If the last member was removed, set abandonedSince to a date.\n\n      var memberCount = Object.keys(this.members).length;\n\n      if (memberCount < 1) {\n        this.abandonedSince = new Date();\n      }\n    }\n  }, {\n    key: \"addTimer\",\n    value: function addTimer(timer) {\n      this.timers.push(timer);\n    }\n    /**\n     * Get a Timer by id.\n     */\n\n  }, {\n    key: \"getTimer\",\n    value: function getTimer(id) {\n      var iterations = this.timers.length;\n\n      for (var i = 0; i < iterations; i += 1) {\n        var timer = this.timers[i];\n\n        if (timer.id === id) {\n          return timer;\n        }\n      }\n\n      throw new Error(\"Could not find timer with id \".concat(id));\n    }\n  }]);\n\n  return Room;\n}();\n\nexport default Room;","import _classCallCheck from \"/mnt/d/Misacorp/GitHub/sea-of-thieves-cooking-timer/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/mnt/d/Misacorp/GitHub/sea-of-thieves-cooking-timer/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar DEV = process.env.NODE_ENV !== 'production';\n/**\n * Foods that can be cooked and their durations.\n */\n\nvar foods = {\n  FISH: {\n    name: 'Fish',\n    duration: 40\n  },\n  TROPHY_FISH: {\n    name: 'Trophy Fish',\n    duration: 90\n  },\n  MEAT: {\n    name: 'Meat',\n    duration: 60\n  },\n  MONSTER_MEAT: {\n    name: 'Monster Meat',\n    duration: 120\n  }\n};\n\nvar Timer =\n/*#__PURE__*/\nfunction () {\n  function Timer(id) {\n    _classCallCheck(this, Timer);\n\n    this.id = id;\n    this.state = 'SELECT';\n    this.startDate;\n    this.duration;\n  }\n  /**\n   * Starts a timer with the given food.\n   */\n\n\n  _createClass(Timer, [{\n    key: \"start\",\n    value: function start(food) {\n      if (Object.keys(foods).includes(food)) {\n        this.state = 'RUNNING';\n        this.startDate = new Date().toString();\n        this.duration = foods[food].duration;\n        this.foodName = foods[food].name;\n        if (DEV) this.duration *= 0.05;\n        return this;\n      }\n\n      throw new TypeError(\"Cannot start a timer with food \".concat(food));\n    }\n    /**\n     * Resets a timer\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.state = 'SELECT';\n    }\n  }]);\n\n  return Timer;\n}();\n\nexport default Timer;","import { Subject } from 'rxjs';\n\n/**\n * Used to publish and subscribe to messages.\n */\nconst MessageCenter = new Subject();\n\n/**\n * Used to publish messages.\n * @param {string} topic Which topic is the event related to. Only subscribers to this topic will receive it.\n * @param {*}      data  Message content.\n */\nconst publish = (topic, data) => MessageCenter.next({ topic, data });\n\nexport { publish };\nexport default MessageCenter;\n","export const CREATE_ROOM = 'CREATE_ROOM';\nexport const JOIN_ROOM = 'JOIN_ROOM';\nexport const START = 'START';\nexport const RESET = 'RESET';\nexport const PAUSE = 'PAUSE';\nexport const USER_JOINED = 'USER_JOINED';\nexport const USER_LEFT = 'USER_LEFT';\nexport const MEMBER_LIST = 'MEMBER_LIST';\nexport const NONEXISTANT_ROOM = 'NONEXISTANT_ROOM';\nexport const ROOM_CREATED = 'ROOM_CREATED';\nexport const REQUEST_TIMERS = 'REQUEST_TIMERS';\nexport const TIMER_SYNC = 'TIMER_SYNC';\nexport const GENERIC_MESSAGE = 'GENERIC_MESSAGE';\n","import { createContext } from 'react';\n\nconst ConnectionContext = createContext(null);\n\nexport default ConnectionContext;\n","import { useRef, useEffect } from 'react';\nimport { filter } from 'rxjs/operators';\n\nimport MessageCenter from '../MessageCenter';\n\nconst debug = false;\n\n/**\n * Custom hook.\n * Provides components with a subscription thingy.\n * @param {object} subs Object where keys are topics and values are their callback functions.\n */\nconst useSubscription = subs => {\n  const subscription = useRef();\n\n  useEffect(() => {\n    const topics = Object.keys(subs);\n\n    if (debug) console.log('✅ [sub]', topics);\n\n    subscription.current = MessageCenter.pipe(\n      filter(({ topic }) => topics.includes(topic)),\n    ).subscribe(({ topic, data }) => {\n      // Call the topic's callback with the received data.\n      subs[topic](data);\n    });\n\n    return () => {\n      if (debug) console.log('❌ [unsub]', topics);\n      subscription.current.unsubscribe();\n    };\n  }, [subs]);\n\n  return subscription;\n};\n\nexport default useSubscription;\n","import { useContext, useCallback } from 'react';\n\nimport ConnectionContext from '../contexts/ConnectionContext';\nimport * as actions from '../actions/actions';\n\n/**\n * Custom hook.\n * Provides functionality for other components to communicate with the server.\n * This can help with stale state: https://github.com/facebook/react/issues/15041\n */\nconst useComms = () => {\n  // Get the socket from our context\n  const { socket } = useContext(ConnectionContext);\n  if (!socket) {\n    throw new Error('Socket not defined');\n  }\n\n  /**\n   * Starts a timer with the given id and food.\n   * @param {string} id   Id of timer to start.\n   * @param {string} food Food indicating timer duration.\n   */\n  const start = (id, food) => () => {\n    socket.emit(actions.START, { id, food });\n  };\n\n  const reset = id => () => {\n    socket.emit(actions.RESET, { id });\n  };\n\n  /**\n   * Join a room with the given code code\n   * @param {string} roomCode Room to join.\n   * @param {string} nickname Client nickname\n   */\n  const joinRoom = useCallback(\n    (roomCode, nickname) => {\n      socket.emit(actions.JOIN_ROOM, { roomCode, nickname });\n    },\n    [socket],\n  );\n\n  /**\n   * Creates a new room.\n   */\n  const createRoom = useCallback(\n    nickname => {\n      if (socket) {\n        socket.emit(actions.CREATE_ROOM, { nickname });\n      } else {\n        console.log('No socket!', socket);\n      }\n    },\n    [socket],\n  );\n\n  const requestTimers = () => {\n    socket.emit(actions.REQUEST_TIMERS);\n  };\n\n  return { start, reset, createRoom, joinRoom, requestTimers };\n};\n\nexport default useComms;\n","import styled from 'styled-components';\n\nimport grid from 'easy-grid';\n\nconst GridBase = grid`\n    50%   50%\n50% A     B\n50% C     D\n`;\n\nconst Grid = styled(GridBase)`\n  width: calc(100vw - 1rem);\n  height: calc(100vw - 1rem);\n  margin: 0.5rem;\n`;\n\nexport default Grid;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Running = ({ food, timeLeft, className }) => {\n  return (\n    <div className={className}>\n      <p>{food} is cooking</p>\n      <h2>{timeLeft}</h2>\n    </div>\n  );\n};\n\nRunning.propTypes = {\n  food: PropTypes.string,\n  timeLeft: PropTypes.number,\n  className: PropTypes.string,\n};\n\nexport default Running;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Button = styled.button`\n  padding: 1rem;\n  background-color: ${({ theme }) => theme.palette.primary.main};\n`;\n\nconst Stopped = ({ reset, className }) => {\n  return (\n    <div className={className}>\n      <p>Timer has stopped</p>\n      <Button type=\"button\" onClick={reset}>\n        OK\n      </Button>\n    </div>\n  );\n};\n\nStopped.propTypes = {\n  reset: PropTypes.func,\n  className: PropTypes.string,\n};\n\nexport default Stopped;\n","import styled from 'styled-components';\nimport grid from 'easy-grid';\n\nconst GridBase = grid`\n    50% 50%\n50% A   B\n50% C   D\n`;\n\nconst Grid = styled(GridBase)`\n  width: 100%;\n  height: 100%;\n`;\n\nexport default Grid;\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst FoodSelectButtonBase = ({ onClick, children, className }) => {\n  return (\n    <button type=\"button\" onClick={onClick} className={className}>\n      {children}\n    </button>\n  );\n};\n\nconst FoodSelectButton = styled(FoodSelectButtonBase)`\n  position: relative;\n  margin: 0;\n  padding: 0rem;\n  border: none;\n  font: inherit;\n  color: inherit;\n  background-color: transparent;\n  /* show a hand cursor on hover; some argue that we\n  should keep the default arrow cursor for buttons */\n  cursor: pointer;\n\n  background-color: ${({ theme }) => theme.palette.primary.main};\n  color: ${({ theme }) => theme.palette.typography.dark};\n\n  width: calc(100% - 6px);\n  height: calc(100% - 6px);\n  margin: 3px;\n`;\n\nFoodSelectButtonBase.propTypes = {\n  onClick: PropTypes.func,\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]),\n  className: PropTypes.string,\n};\n\nexport default FoodSelectButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TimerButtonGrid from '../../Generic/Grids/TimerButtonGrid';\nimport FoodSelectButton from '../FoodSelectButton';\n\nconst Select = ({ start, className }) => {\n  return (\n    <TimerButtonGrid className={className}>\n      <FoodSelectButton onClick={start('FISH')}>Fish</FoodSelectButton>\n      <FoodSelectButton onClick={start('TROPHY_FISH')}>\n        Trophy Fish\n      </FoodSelectButton>\n      <FoodSelectButton onClick={start('MEAT')}>Meat</FoodSelectButton>\n      <FoodSelectButton onClick={start('MONSTER_MEAT')}>\n        Monster meat\n      </FoodSelectButton>\n    </TimerButtonGrid>\n  );\n};\n\nSelect.propTypes = {\n  start: PropTypes.func,\n  className: PropTypes.string,\n};\n\nexport default Select;\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nimport useComms from '../hooks/useComms';\nimport Running from './TimerStates/Running';\nimport Stopped from './TimerStates/Stopped';\nimport Select from './TimerStates/Select';\n\nimport audioFile from '../../assets/sound/annoying-vuvuzela-tone.mp3';\n\nconst OnlineTimer = ({\n  id,\n  startDate,\n  state,\n  duration,\n  foodName,\n  className,\n}) => {\n  const { start, reset } = useComms();\n  const [soundHasPlayed, setSoundHasPlayed] = useState(false);\n\n  // When a new start date is given, reset sound so that it can be played.\n  useEffect(() => {\n    setSoundHasPlayed(false);\n  }, [startDate]);\n\n  /**\n   * Plays a sound effect.\n   */\n  const playSound = () => {\n    const audio = new Audio(audioFile);\n\n    // Don't break developers' ears.\n    if (process.env.NODE_ENV !== 'production') {\n      audio.volume = 0.15;\n    }\n\n    audio.play();\n    setSoundHasPlayed(true);\n  };\n\n  /**\n   * Get remaining time in seconds.\n   */\n  const getTimeLeft = () => {\n    // Calculate time that has elapsed since starting the counter.\n    const currentTime = new Date();\n    const startTime = new Date(startDate); // Convert string to date\n    const timeElapsed = currentTime - startTime;\n\n    // Speed times up while in development\n    const timeLeft = duration - timeElapsed / 1000;\n\n    return Math.max(0, Math.round(timeLeft));\n  };\n\n  const timeLeft = getTimeLeft();\n\n  // Play sound if time has run out\n  if (timeLeft <= 0 && !soundHasPlayed) {\n    playSound();\n  }\n\n  if (state === 'RUNNING' && timeLeft > 0) {\n    return (\n      <Running food={foodName} timeLeft={timeLeft} className={className} />\n    );\n  }\n\n  /**\n   * If timer is stopped (has just finished and needs to be reset)\n   */\n  if (state === 'STOPPED' || (timeLeft <= 0 && state === 'RUNNING')) {\n    return <Stopped reset={reset(id)} className={className} />;\n  }\n\n  /**\n   * If timer is idle.\n   */\n  if (state === 'SELECT') {\n    return <Select start={food => start(id, food)} className={className} />;\n  }\n\n  return <p>Unknown state</p>;\n};\n\nOnlineTimer.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string,\n  startDate: PropTypes.string,\n  state: PropTypes.string,\n  duration: PropTypes.number,\n  foodName: PropTypes.string,\n};\n\nconst NewTimer = styled(OnlineTimer)`\n  height: calc(100% - 0.5rem);\n  width: calc(100% - 0.5rem);\n  padding: 0.1rem;\n  margin: 0.25rem;\n  background-color: ${({ theme }) => theme.palette.primary.dark};\n\n  text-align: center;\n`;\n\nexport default NewTimer;\n","import React, { useState, useEffect, useRef } from 'react';\n\nimport { TIMER_SYNC } from '../actions/actions';\nimport useSubscription from '../hooks/useSubscription';\nimport useComms from '../hooks/useComms';\n\nimport FourByFourGrid from '../Generic/Grids/FourByFourGrid';\nimport OnlineTimer from './OnlineTimer';\n\nconst TimerGrid = () => {\n  // Store an array of timers we will later render into components.\n  const [timers, setTimers] = useState([]);\n  const timerCount = timers.length;\n\n  // Store our subscription settings in a ref. We don't want to change these over the course of the component's lifetime.\n  const subscriptionSettings = useRef({\n    [TIMER_SYNC]: data => {\n      setTimers(data.timers);\n    },\n  });\n  // Subscribe to the events above.\n  useSubscription(subscriptionSettings.current);\n\n  // Give this component an internal date that refreshes each timer.\n  const [, setDate] = useState(new Date());\n\n  // Ticking function to update the stored date.\n  const tick = () => {\n    setDate(new Date()); // This refreshes the component state and triggers a re-render (?)\n  };\n\n  const { requestTimers } = useComms();\n  /**\n   * Set up an internal interval to call tick()\n   * Runs on mount and clears itself on unmount.\n   */\n  useEffect(() => {\n    const timerID = setInterval(() => tick(), 200); // Tickrate influences the responsiveness of offline UI\n\n    // If no timers are present, request them.\n    if (timerCount < 1) {\n      console.log(`[TimerGrid] No timers!`);\n      requestTimers();\n    }\n\n    return function cleanup() {\n      clearInterval(timerID);\n    };\n  }, [timerCount, requestTimers]);\n\n  // If server hasn't sent us timers yet.\n  if (timers.length !== 4) {\n    return <p>No timers</p>;\n  }\n\n  return (\n    <FourByFourGrid>\n      {timers.map(timer => (\n        <OnlineTimer\n          key={timer.id}\n          id={timer.id}\n          startDate={timer.startDate}\n          duration={timer.duration}\n          foodName={timer.foodName}\n          state={timer.state}\n        />\n      ))}\n    </FourByFourGrid>\n  );\n};\n\nexport default TimerGrid;\n","import React, { useRef } from 'react';\n\nimport fakeSocket from '../services/fakeSocket';\nimport ConnectionContext from './contexts/ConnectionContext';\n\nimport TimerGrid from './Timers/TimerGrid';\n\nconst Offline = () => {\n  // Create an empty socket and a mock socket.\n  const socket = useRef();\n\n  fakeSocket.init();\n  socket.current = fakeSocket;\n\n  return (\n    <ConnectionContext.Provider value={{ socket: socket.current }}>\n      <TimerGrid />\n    </ConnectionContext.Provider>\n  );\n};\n\nexport default Offline;\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\n/**\n * Button component\n * Variants:\n *   - Main: Displayed as a block to take up entire width.\n *   - Inline: Displayed as an inline block.\n */\nconst ButtonBase = ({ onClick, children, className, variant, ...rest }) => {\n  return (\n    <button type=\"button\" onClick={onClick} className={className} {...rest}>\n      {children}\n    </button>\n  );\n};\n\nButtonBase.propTypes = {\n  onClick: PropTypes.func,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  variant: PropTypes.string,\n};\n\nconst Button = styled(ButtonBase)`\n  /* Reset button styles */\n  border: none;\n  font: inherit;\n  cursor: pointer;\n\n  display: ${({ variant }) => (variant === 'inline' ? 'inline-block' : 'block')}\n  background-color: ${({ theme }) => theme.palette.primary.main};\n  color: ${({ theme }) => theme.palette.typography.dark};\n  margin-top: 0.5rem;\n  margin-bottom: 0.5rem;\n  margin-left: ${({ variant }) => (variant === 'inline' ? '0.5rem' : 'auto')}\n  margin-right: ${({ variant }) => (variant === 'inline' ? '0.5rem' : 'auto')}\n  padding: 0.5rem 1rem;\n\n  border-radius: 3rem;\n  text-transform: uppercase;\n\n  &:disabled {\n    background-color: ${({ theme }) => theme.palette.disabled.main};\n    pointer-events: none;\n  }\n`;\n\nexport default Button;\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\n// Text in the middle of a divider\nconst DividerText = styled.p`\n  display: inline-block;\n  background-color: #7a7a7a;\n  padding: 0.25rem 0.5rem;\n  color: ${({ theme }) => theme.palette.typography.dark};\n  font-size: 0.75rem;\n  font-weight: bold;\n\n  ::before {\n    content: '';\n    height: 1px;\n    width: 100%;\n    background-color: #7a7a7a;\n    position: absolute;\n    left: 0;\n    top: 50%;\n    z-index: -1;\n  }\n`;\n\nconst DividerBase = ({ className, children }) => {\n  return (\n    <div className={className}>\n      <DividerText>{children}</DividerText>\n    </div>\n  );\n};\n\nDividerBase.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node,\n};\n\nconst Divider = styled(DividerBase)`\n  position: relative;\n  text-align: center;\n`;\n\nexport default Divider;\n","import styled from 'styled-components';\n\nconst Input = styled.input`\n  background-color: white;\n  border: none;\n  padding: 1rem;\n  font-size: 1rem;\n  margin-top: 0.5rem;\n  margin-bottom: 0.5rem;\n  margin-left: ${({ variant }) => (variant === 'inline' ? '0.5rem' : 'auto')}\n  margin-right: ${({ variant }) => (variant === 'inline' ? '0.5rem' : 'auto')}\n  display: ${({ variant }) => (variant === 'inline' ? 'inline-block' : 'block')}\n`;\n\nexport default Input;\n","import React, {\n  useCallback,\n  useEffect,\n  useContext,\n  useRef,\n  useState,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { Redirect, Link } from 'react-router-dom';\n\nimport { ROOM_CREATED } from './actions/actions';\nimport ConnectionContext from './contexts/ConnectionContext';\nimport Button from './Generic/Button';\nimport Divider from './Generic/Divider';\nimport Input from './Generic/Input';\nimport useComms from './hooks/useComms';\nimport useSubscription from './hooks/useSubscription';\n\nimport { ONLINE_ROOT } from '../types/routes';\n\nconst roomCodeLength = 4;\n\n/**\n * Displays a form where a user can\n *   - Set their nickname\n *   - Create a room\n *     OR\n *   - Enter a room code\n *   - Join that room\n */\nconst RoomSelectBase = ({ className }) => {\n  const {\n    nickname,\n    setNickname,\n    activeRoomCode,\n    setActiveRoomCode,\n  } = useContext(ConnectionContext);\n\n  /**\n   * Allow the user to set a nickname\n   */\n\n  const handleNicknameChange = event => {\n    const newName = event.target.value;\n    setNickname(newName);\n  };\n\n  /**\n   * Validates a nickname.\n   * Used before creating or joining a room.\n   */\n  const nicknameIsValid = () => {\n    return (\n      typeof nickname === 'string' &&\n      nickname.length >= 3 &&\n      nickname.length <= 32\n    );\n  };\n\n  /**\n   * Allow the user to set a room code\n   */\n  const [roomCode, setRoomCode] = useState('');\n  const handleRoomCodeChange = event => {\n    let newRoomCode = event.target.value;\n\n    // Limit room code length\n    if (newRoomCode.length <= roomCodeLength) {\n      newRoomCode = newRoomCode.toUpperCase();\n      setRoomCode(newRoomCode);\n    }\n  };\n\n  /**\n   * Validate roomCode.\n   */\n  const roomCodeIsValid = useCallback(\n    roomCodeParam => {\n      const roomCodeToCheck = roomCodeParam || roomCode;\n      return roomCodeToCheck.length === roomCodeLength;\n    },\n    [roomCode],\n  );\n\n  // Use our custom useComms hook to communicate with the server.\n  const { createRoom } = useComms();\n\n  /**\n   * Pass create room event to its action handler.\n   */\n  const handleCreateRoom = () => {\n    if (nicknameIsValid()) {\n      createRoom(nickname);\n    }\n  };\n\n  // Subscribe to relevant events.\n  const subscriptionSettings = useRef({\n    [ROOM_CREATED]: createdRoomCode => {\n      setActiveRoomCode(createdRoomCode);\n    },\n  });\n  // Subscribe to the events above.\n  useSubscription(subscriptionSettings.current);\n\n  // If there is an active room code, redirect the user to an OnlineRoom component.\n  const [status, setStatus] = useState('INIT');\n  useEffect(() => {\n    if (activeRoomCode && roomCodeIsValid(activeRoomCode)) {\n      setStatus('ROOM_ACTIVE');\n    }\n  }, [activeRoomCode, roomCodeIsValid]);\n\n  if (status === 'ROOM_ACTIVE') {\n    return <Redirect to={`${ONLINE_ROOT}/${activeRoomCode}`} />;\n  }\n\n  // Otherwise display the Room Select form\n  return (\n    <div className={className}>\n      <Input\n        type=\"text\"\n        onChange={handleNicknameChange}\n        value={nickname}\n        placeholder=\"My name is...\"\n        aria-label=\"Nickname\"\n        aria-required=\"true\"\n        style={{ marginBottom: '4rem' }}\n      />\n\n      {nicknameIsValid() && (\n        <React.Fragment>\n          <Button\n            variant=\"main\"\n            disabled={!nicknameIsValid()}\n            onClick={handleCreateRoom}\n          >\n            Create room\n          </Button>\n\n          <Divider>OR</Divider>\n\n          <Input\n            type=\"text\"\n            onChange={handleRoomCodeChange}\n            value={roomCode}\n            placeholder=\"Room code\"\n            aria-label=\"Room code\"\n          />\n          <Link to={`/online/${roomCode}`}>\n            <Button variant=\"main\" disabled={!roomCodeIsValid()}>\n              Join room\n            </Button>\n          </Link>\n        </React.Fragment>\n      )}\n    </div>\n  );\n};\n\nRoomSelectBase.propTypes = {\n  className: PropTypes.string,\n};\n\nconst RoomSelect = styled(RoomSelectBase)``;\n\nexport default RoomSelect;\n","import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nimport ConnectionContext from './contexts/ConnectionContext';\n\nconst RoomCodeDisplayBase = ({ className }) => {\n  // Get the room code from ConnectionContext\n  const connection = useContext(ConnectionContext);\n  const { activeRoomCode } = connection;\n\n  return <p className={className}>Room {activeRoomCode}</p>;\n};\n\nRoomCodeDisplayBase.propTypes = {\n  className: PropTypes.string,\n};\n\nconst RoomCodeDisplay = styled(RoomCodeDisplayBase)`\n  text-align: center;\n`;\n\nexport default RoomCodeDisplay;\n","import ls from 'local-storage';\n\nconst set = obj => {\n  const keys = Object.keys(obj);\n  keys.forEach(key => {\n    const value = obj[key];\n    ls(key, value);\n  });\n};\n\nconst get = key => ls(key);\n\nexport { set, get };\n","import React, { useContext, useState, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\n\nimport RoomCodeDisplay from './RoomCodeDisplay';\nimport TimerGrid from './Timers/TimerGrid';\nimport { ONLINE_ROOT } from '../types/routes';\nimport { NONEXISTANT_ROOM, USER_JOINED, MEMBER_LIST } from './actions/actions';\n\nimport useComms from './hooks/useComms';\nimport useSubscription from './hooks/useSubscription';\nimport ConnectionContext from './contexts/ConnectionContext';\nimport { set as saveToLocalStorage } from '../services/localStorageHandler';\n\nconst OnlineRoom = props => {\n  const [status, setStatus] = useState('INIT'); // INIT, NONEXISTANT_ROOM, NO_NICKNAME, READY\n  const { nickname, setActiveRoomCode } = useContext(ConnectionContext);\n  const nicknameValid = nickname && nickname.length > 0;\n\n  const subscriptionSettings = useRef({\n    // If a room does not exist, use a subscription to the NONEXISTANT_ROOM event to redirect the user back to selecting a room.\n    [NONEXISTANT_ROOM]: () => {\n      setStatus('NONEXISTANT_ROOM');\n    },\n    // On a successful join, update the active room code\n    [USER_JOINED]: data => {\n      setActiveRoomCode(data.roomCode);\n    },\n    // When the MEMBER_LIST event is received, the room is ready.\n    [MEMBER_LIST]: () => {\n      setStatus('READY');\n    },\n  });\n  // Subscribe to the events above.\n  useSubscription(subscriptionSettings.current);\n\n  // Get Room Code from the URL.\n  const {\n    match: {\n      params: { roomCode },\n    },\n  } = props;\n\n  // Attempt to join the room\n  const { joinRoom } = useComms();\n  useEffect(() => {\n    if (nicknameValid) {\n      // Save valid nickname to localstorage in case of client disconnects\n      saveToLocalStorage({ nickname });\n      joinRoom(roomCode, nickname);\n    } else {\n      // Don't join if no nickname is set\n      setStatus('NO_NICKNAME');\n    }\n  }, [joinRoom, roomCode, nickname, nicknameValid]);\n\n  if (status === 'INIT') {\n    return <p>Joining room...</p>;\n  }\n\n  if (status === 'NONEXISTANT_ROOM' || status === 'NO_NICKNAME') {\n    return <Redirect to={ONLINE_ROOT} />;\n  }\n\n  if (status === 'READY') {\n    return (\n      <>\n        <RoomCodeDisplay />\n        <TimerGrid />\n      </>\n    );\n  }\n\n  return <p>Unknown OnlineRoom status</p>;\n};\n\nOnlineRoom.propTypes = {\n  match: PropTypes.object,\n};\n\nexport default OnlineRoom;\n","import io from 'socket.io-client';\nimport uuid from 'uuid/v4';\nimport * as actions from '../components/actions/actions';\nimport { publish } from '../components/MessageCenter';\n\nconst createSocket = () => {\n  // Connect to the socket\n  const serverUrl =\n    process.env.NODE_ENV === 'development'\n      ? 'http://localhost:1338'\n      : 'https://sea-of-thieves-cooking-timer.herokuapp.com';\n\n  const socket = io(serverUrl);\n\n  return socket;\n};\n\nconst startListening = socket => {\n  // Someone joined the room.\n  socket.on(actions.USER_JOINED, data => {\n    const { nickname, timestamp, roomCode } = data;\n    publish(actions.USER_JOINED, {\n      type: actions.USER_JOINED,\n      id: uuid(),\n      nickname,\n      timestamp,\n      roomCode,\n    });\n  });\n\n  // User themself joined a room.\n  socket.on(actions.MEMBER_LIST, data => {\n    const { timestamp, members } = data;\n    publish(actions.MEMBER_LIST, {\n      type: actions.MEMBER_LIST,\n      id: uuid(),\n      timestamp,\n      members,\n    });\n  });\n\n  // Someone else left the room.\n  socket.on(actions.USER_LEFT, data => {\n    const { nickname, timestamp } = data;\n    publish(actions.USER_LEFT, {\n      type: actions.USER_LEFT,\n      id: uuid(),\n      nickname,\n      timestamp,\n    });\n  });\n\n  // Room was created.\n  socket.on(actions.ROOM_CREATED, data => {\n    const { roomCode } = data;\n    publish(actions.ROOM_CREATED, roomCode);\n    // console.log(`🚪 Room code: ${roomCode}`);\n  });\n\n  // Client tried to join a room that doesn't exist.\n  socket.on(actions.NONEXISTANT_ROOM, data => {\n    const { roomCode, timestamp } = data;\n    publish(actions.NONEXISTANT_ROOM, {\n      type: actions.NONEXISTANT_ROOM,\n      id: uuid(),\n      roomCode,\n      timestamp,\n    });\n  });\n\n  // Server sent timers.\n  socket.on(actions.TIMER_SYNC, data => {\n    const { timers, message } = data;\n    publish(actions.TIMER_SYNC, {\n      type: actions.TIMER_SYNC,\n      id: uuid(),\n      timestamp: new Date().toString(),\n      timers,\n      message,\n    });\n  });\n\n  // Generic message\n  socket.on(actions.GENERIC_MESSAGE, data => {\n    const { message } = data;\n\n    publish(actions.GENERIC_MESSAGE, {\n      type: actions.GENERIC_MESSAGE,\n      id: uuid(),\n      timestamp: new Date().toString(),\n      message,\n    });\n  });\n};\n\nconst stopListening = socket => {\n  socket.off(actions.USER_JOINED);\n  socket.off(actions.USER_LEFT);\n  socket.off(actions.NONEXISTANT_ROOM);\n  socket.off(actions.MEMBER_LIST);\n  socket.off(actions.ROOM_CREATED);\n\n  console.log('Removed event listeners');\n};\n\nexport { createSocket, startListening, stopListening };\nexport default createSocket;\n","import React, { useState, useRef } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { uniqueNamesGenerator } from 'unique-names-generator';\n\nimport ConnectionContext from './contexts/ConnectionContext';\nimport RoomSelect from './RoomSelect';\nimport OnlineRoom from './OnlineRoom';\nimport { createSocket, startListening } from '../services/socketHandler';\nimport * as routes from '../types/routes';\nimport { get as getFromLocalStorage } from '../services/localStorageHandler';\n\n/**\n * Auto-populate fields in development for faster testing\n */\nconst useDebugValues = false;\nlet initialNickname = getFromLocalStorage('nickname') || '';\nif (process.env.NODE_ENV === 'development' && useDebugValues) {\n  initialNickname = uniqueNamesGenerator('-', true);\n}\n\n/**\n * User has selected to go Online. This component handles things from there on:\n * - Username selection\n * - Create or join room\n */\nconst Online = () => {\n  const [activeRoomCode, setActiveRoomCode] = useState(null);\n  const [nickname, setNickname] = useState(initialNickname);\n\n  // Create an empty socket and a mock socket.\n  const socket = useRef();\n\n  // If no socket has been set, create a new one.\n  // We add this directly to the socket ref to prevent unnecessary changes to it in the future.\n  if (socket.current === undefined) {\n    console.log('No socket set. Creating!');\n    socket.current = createSocket();\n\n    // Initialize event listeners on the socket.\n    startListening(socket.current);\n  }\n  if (!socket.current) {\n    console.log('Weird case of no socket whatsoever');\n    return null;\n  }\n\n  const connection = {\n    socket: socket.current,\n    nickname,\n    setNickname: newNickname => setNickname(newNickname),\n    activeRoomCode,\n    setActiveRoomCode: roomCode => setActiveRoomCode(roomCode),\n  };\n\n  return (\n    <ConnectionContext.Provider value={connection}>\n      <Switch>\n        <Route\n          path={`${routes.ONLINE_ROOT}/:roomCode`}\n          component={OnlineRoom}\n        />\n        <Route path=\"/\" component={RoomSelect} />\n      </Switch>\n    </ConnectionContext.Provider>\n  );\n};\n\nexport default Online;\n","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport PropTypes from 'prop-types';\n\n/**\n * Displays the timestamp of a given message\n */\nconst TimeContainer = styled.span`\n  padding-right: 0.5rem;\n  color: #9f9f9f;\n`;\n\n/**\n * Structure of a message.\n */\nconst MessageBase = ({ className, timestamp, children }) => {\n  const date = new Date(timestamp);\n\n  return (\n    <p className={className}>\n      <TimeContainer>{`${date.getHours()}:${date.getMinutes()}`}</TimeContainer>\n      <span>{children}</span>\n    </p>\n  );\n};\n\nMessageBase.propTypes = {\n  className: PropTypes.string,\n  timestamp: PropTypes.string,\n  children: PropTypes.node,\n};\n\n// Fade messages out after some time.\nconst fadeOut = keyframes`\n  from {\n    opacity: 1;\n  }\n\n  to {\n    opacity: 0;\n  }\n`;\n\n/**\n * Styled message structure\n */\nconst Message = styled(MessageBase)`\n  background-color: white;\n  display: inline-flex;\n  padding: 0.5rem 1rem;\n  border-radius: 1rem;\n  color: ${({ theme }) => theme.palette.typography.dark};\n  margin: 0.15rem;\n  animation: ${fadeOut} 1s ease-out 6s 1 forwards;\n`;\n\nexport default Message;\n","import * as actions from '../components/actions/actions';\n\n/**\n * Templates for various types of messages.\n */\nconst messageTemplates = {};\n\nmessageTemplates[actions.USER_JOINED] = data => {\n  const { nickname, roomCode } = data;\n  return `${nickname} joined room ${roomCode}`;\n};\n\nmessageTemplates[actions.MEMBER_LIST] = ({ members }) => {\n  const memberString = members.join(', ');\n  return `Current members: ${memberString}`;\n};\n\nmessageTemplates[actions.USER_LEFT] = ({ nickname }) => {\n  return `${nickname} left`;\n};\n\nmessageTemplates[actions.NONEXISTANT_ROOM] = ({ roomCode }) => {\n  return `Room ${roomCode} doesn't exist`;\n};\n\nmessageTemplates[actions.TIMER_SYNC] = ({ message }) => {\n  return message;\n};\n\nmessageTemplates[actions.GENERIC_MESSAGE] = ({ message }) => {\n  return message;\n};\n\nexport default messageTemplates;\n","/**\n * Generic message data type to the front end.\n * @param {string} id        Identifier used primarily in React components' key attribute.\n * @param {string} timestamp Timestamp for when the event for this message happened.\n * @param {string} content   Actual message content.\n */\nclass Message {\n  constructor({ id, timestamp, content }) {\n    this.id = id;\n    this.timestamp = timestamp;\n    this.content = content;\n  }\n}\n\nexport default Message;\n","import React, { useState, useRef } from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nimport {\n  USER_JOINED,\n  USER_LEFT,\n  MEMBER_LIST,\n  NONEXISTANT_ROOM,\n  TIMER_SYNC,\n  GENERIC_MESSAGE,\n} from '../actions/actions';\nimport useSubscription from '../hooks/useSubscription';\nimport SingleMessage from './SingleMessage';\nimport messageTemplates from '../../types/messageTemplates';\nimport Message from '../../types/message';\n\n// List of events this component subscribes to (and handles).\nconst MAX_MESSAGES = 7;\n\nconst MessageDisplayBase = ({ className }) => {\n  // Store messages in state.\n  const [messages, setMessages] = useState([]);\n\n  // Build human-readable messages out of data that is received.\n  const handleMessage = data => {\n    const { id, type, timestamp, ...otherData } = data;\n\n    // Set the message content via messageTemplates.\n    const content = messageTemplates[type](otherData);\n    const newMessage = new Message({ id, timestamp, content });\n\n    setMessages(prevMessages => {\n      const newMessages = [...prevMessages, newMessage];\n      return newMessages;\n    });\n  };\n\n  // Store our subscription settings in a ref. We don't want to change these over the course of the component's lifetime.\n  const subscriptionSettings = useRef({\n    [USER_JOINED]: data => {\n      handleMessage(data);\n    },\n    [USER_LEFT]: data => {\n      handleMessage(data);\n    },\n    [MEMBER_LIST]: data => {\n      handleMessage(data);\n    },\n    [NONEXISTANT_ROOM]: data => {\n      handleMessage(data);\n    },\n    [TIMER_SYNC]: data => {\n      if (data.message) handleMessage(data);\n    },\n    [GENERIC_MESSAGE]: data => {\n      handleMessage(data);\n    },\n  });\n  // Subscribe to the events above.\n  useSubscription(subscriptionSettings.current);\n\n  return (\n    <div className={className}>\n      {// Only show a portion of the latest messages.\n      messages.slice(MAX_MESSAGES * -1).map(msg => (\n        <SingleMessage key={`${msg.id}`} timestamp={msg.timestamp}>\n          {msg.content}\n        </SingleMessage>\n      ))}\n    </div>\n  );\n};\n\nMessageDisplayBase.propTypes = {\n  className: PropTypes.string,\n};\n\nconst MessageDisplay = styled(MessageDisplayBase)`\n  position: absolute;\n  bottom: 2.5rem;\n  left: 0.25rem;\n  right: 0.25rem;\n  text-align: right;\n  z-index: 999;\n  user-select: none;\n  pointer-events: none;\n\n  & span {\n    text-align: left;\n  }\n`;\n\nexport default MessageDisplay;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Header from './Header';\nimport AppControls from './AppControls';\n\nimport Welcome from './Welcome';\nimport Offline from './Offline';\nimport Online from './Online';\nimport MessageDisplay from './MessageDisplay/MessageDisplay';\nimport * as routes from '../types/routes';\n\n/**\n * Actual main app content.\n */\nconst Main = () => {\n  return (\n    <>\n      <Header />\n      <Switch>\n        <Route exact path={routes.OFFLINE} component={Offline} />\n        <Route path={routes.ONLINE_ROOT} component={Online} />\n        <Route path={routes.ROOT} component={Welcome} />\n      </Switch>\n      <MessageDisplay />\n      <AppControls />\n    </>\n  );\n};\n\nexport default Main;\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { ThemeProvider } from 'styled-components';\nimport WebFont from 'webfontloader';\n\nimport theme from './styles/theme';\nimport GlobalStyles from './styles/GlobalStyles';\n\nimport Main from './components/Main';\n\nWebFont.load({\n  google: {\n    families: ['Montserrat:500,600,800', 'serif'],\n  },\n});\n\nconst devBasename = '/';\nconst prodBasename = '/sea-of-thieves-cooking-timer';\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <>\n        <GlobalStyles />\n        <BrowserRouter\n          basename={\n            process.env.NODE_ENV === 'development' ? devBasename : prodBasename\n          }\n        >\n          <Main />\n        </BrowserRouter>\n      </>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/annoying-vuvuzela-tone.7c0e3fdb.mp3\";"],"sourceRoot":""}